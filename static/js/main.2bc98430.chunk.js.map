{"version":3,"sources":["shared/helpers/thumbnailHelper.ts","shared/hooks/useImageThumbnail.ts","shared/components/SelectionButton.tsx","shared/components/TumbnailButton.tsx","shared/components/ImageButton.tsx","shared/components/SelectionIconButton.tsx","core/helpers/backgroundHelper.ts","core/components/BackgroundConfigCard.tsx","core/components/PostProcessingConfigCard.tsx","core/helpers/segmentationHelper.ts","core/components/SegmentationConfigCard.tsx","shared/hooks/useVideoThumbnail.ts","shared/components/VideoButton.tsx","core/helpers/sourceHelper.ts","core/components/SourceConfigCard.tsx","core/components/OutputStreamViewer.tsx","pipelines/canvas2d/canvas2dPipeline.ts","pipelines/helpers/webglHelper.ts","pipelines/webgl2/resizingStage.ts","pipelines/webgl2/webgl2Pipeline.ts","pipelines/webgl2/softmaxStage.ts","pipelines/webgl2/jointBilateralFilterStage.ts","pipelines/webgl2/backgroundBlurStage.ts","pipelines/webgl2/backgroundImageStage.ts","core/hooks/useStats.ts","core/hooks/useRenderingPipeline.ts","core/components/OutputViewer.tsx","core/components/SourceViewer.tsx","core/components/ViewerCard.tsx","core/hooks/useBodyPix.ts","core/hooks/useTFLite.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["getThumbnailBlob","source","originalWidth","originalHeight","sourceSize","Math","min","horizontalShift","verticalShift","canvas","document","createElement","width","height","getContext","drawImage","Promise","resolve","toBlob","blob","useImageThumbnail","imageUrl","useState","thumbnailUrl","setThumbnailUrl","useEffect","image","Image","src","onload","a","naturalWidth","naturalHeight","URL","createObjectURL","revokeObjectURL","useStyles","makeStyles","theme","createStyles","root","padding","minWidth","spacing","marginRight","marginBottom","border","alignItems","transitionProperty","transitionDuration","transitions","duration","shorter","transitionTimingFunction","easing","easeInOut","transform","active","borderColor","palette","primary","main","SelectionButton","props","classes","Button","className","clsx","disabled","onClick","children","scalableContent","margin","borderRadius","shape","objectFit","ThumbnailButton","alt","onLoad","Skeleton","variant","ImageButton","revokeThumbnailUrl","borderWidth","borderStyle","boxSizing","display","justifyContent","SelectionIconButton","backgroundImageUrls","map","imageName","process","flex","BackgroundConfigCard","Card","CardContent","Typography","gutterBottom","component","config","type","onChange","url","Object","assign","lightWrapping","formControl","marginTop","PostProcessingConfigCard","pipeline","Fragment","Slider","value","jointBilateralFilter","sigmaSpace","max","step","valueLabelDisplay","_event","sigmaColor","coverage","FormControl","InputLabel","Select","label","blendMode","event","target","MenuItem","FormControlLabel","control","Switch","color","checked","smoothSegmentationMask","useImageLayer","InputResolutions","breakpoints","only","gridColumnStart","gridRowStart","formControls","flexWrap","SegmentationConfigCard","model","backend","inputResolution","isSIMDSupported","keys","sort","b","parseInt","reverse","res","useVideoThumbnail","videoUrl","video","onloadedmetadata","currentTime","onseeked","videoWidth","videoHeight","icon","position","bottom","right","common","white","VideoButton","sourceImageUrls","sourceVideoUrls","videoName","SourceConfigCard","resolution","render","stats","top","left","textAlign","backgroundColor","playback","OutputStreamViewer","videoRef","useRef","current","srcObject","streamPlayback","canvasStream","ref","autoPlay","playsInline","controls","muted","buildCanvas2dPipeline","sourcePlayback","backgroundConfig","segmentationConfig","bodyPix","tflite","addFrameEvent","ctx","desynchronized","imageSmoothingEnabled","imageSmoothingQuality","segmentationWidth","segmentationHeight","segmentationPixelCount","segmentationMask","ImageData","segmentationMaskCanvas","postProcessingConfig","segmentationMaskCtx","inputMemoryOffset","_getInputMemoryOffset","outputMemoryOffset","_getOutputMemoryOffset","resizeSource","runBodyPixInference","runTFLiteInference","runPostProcessing","htmlElement","imageData","getImageData","i","j","HEAPF32","data","segmentPerson","segmentation","putImageData","_runInference","outputChannels","mask","pos","background","person","shift","backgroundExp","exp","personExp","globalCompositeOperation","filter","blur","img","blurBackground","updatePostProcessingConfig","newPostProcessingConfig","cleanUp","glsl","String","raw","createPiplelineStageProgram","gl","vertexShader","fragmentShader","positionBuffer","texCoordBuffer","program","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","Error","getProgramInfoLog","positionAttributeLocation","getAttribLocation","enableVertexAttribArray","bindBuffer","ARRAY_BUFFER","vertexAttribPointer","FLOAT","texCoordAttributeLocation","compileShader","shaderType","shaderSource","shader","createShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","createTexture","internalformat","minFilter","NEAREST","magFilter","texture","bindTexture","TEXTURE_2D","texParameteri","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","TEXTURE_MIN_FILTER","TEXTURE_MAG_FILTER","texStorage2D","x","y","format","dest","buf","createBuffer","PIXEL_PACK_BUFFER","bufferData","byteLength","STREAM_READ","readPixels","getBufferSubDataAsync","deleteBuffer","buffer","srcByteOffset","dstBuffer","dstOffset","length","sync","fenceSync","SYNC_GPU_COMMANDS_COMPLETE","flush","clientWaitAsync","deleteSync","WAIT_FAILED","getBufferSubData","requestAnimationFrame","test","clientWaitSync","TIMEOUT_EXPIRED","buildResizingStage","fragmentShaderSource","tfliteInputMemoryOffset","outputWidth","outputHeight","outputPixelCount","FRAGMENT_SHADER","inputFrameLocation","getUniformLocation","outputTexture","RGBA8","frameBuffer","createFramebuffer","bindFramebuffer","FRAMEBUFFER","framebufferTexture2D","COLOR_ATTACHMENT0","outputPixels","Uint8Array","useProgram","uniform1i","viewport","drawArrays","TRIANGLE_STRIP","readPixelsAsync","RGBA","UNSIGNED_BYTE","tfliteIndex","outputIndex","deleteFramebuffer","deleteTexture","deleteProgram","deleteShader","buildWebGL2Pipeline","backgroundImage","vertexShaderSource","frameWidth","frameHeight","VERTEX_SHADER","vertexArray","createVertexArray","bindVertexArray","Float32Array","STATIC_DRAW","inputFrameTexture","segmentationTexture","personMaskTexture","resizingStage","softmaxStage","tfliteOutputMemoryOffset","inputLocation","inputTexture","RG32F","activeTexture","TEXTURE1","texSubImage2D","RG","buildSoftmaxStage","jointBilateralFilterStage","texelWidth","texelHeight","segmentationMaskLocation","texelSizeLocation","stepLocation","radiusLocation","offsetLocation","sigmaTexelLocation","sigmaColorLocation","updateSigmaSpace","sqrt","radius","offset","sigmaTexel","uniform1f","updateSigmaColor","uniform2f","buildJointBilateralFilterStage","backgroundStage","personMaskLocation","flipYLocation","texture1","texture2","frameBuffer1","frameBuffer2","TEXTURE0","buildBackgroundBlurStage","outputRatio","backgroundScaleLocation","backgroundOffsetLocation","backgroundLocation","coverageLocation","lightWrappingLocation","blendModeLocation","backgroundTexture","updateBackgroundImage","LINEAR","xOffset","yOffset","backgroundWidth","backgroundHeight","xScale","yScale","complete","TEXTURE2","updateCoverage","updateLightWrapping","updateBlendMode","buildBackgroundImageStage","clearColor","clear","COLOR_BUFFER_BIT","texImage2D","backgroundImageStage","deleteVertexArray","useStats","fps","setFps","durations","setDurations","previousTimeRef","beginTimeRef","durationsRef","eventCount","frameCountRef","beginFrame","useCallback","performance","now","time","endFrame","useRenderingPipeline","setPipeline","backgroundImageRef","canvasRef","renderRequestId","shouldRender","lastRenderTime","frameDelay","newPipeline","console","log","cancelAnimationFrame","OutputViewer","resizingDuration","inferenceDuration","postProcessingDuration","captureStream","statDetails","hidden","round","key","val","toFixed","padStart","join","down","overflow","up","borderRightWidth","borderRightStyle","borderRightColor","divider","SourceViewer","sourceUrl","setSourceUrl","isLoading","setLoading","isCameraError","setCameraError","undefined","setTimeout","sourceConfig","constraint","exact","navigator","mediaDevices","getUserMedia","stream","error","MediaStream","getVideoTracks","forEach","t","stop","getCameraStream","CircularProgress","fontSize","loop","onLoadedData","minHeight","gridColumnEnd","gridRowEnd","noOutput","avatar","ViewerCard","setSourcePlayback","setStreamPlayback","Paper","Avatar","useBodyPix","setBodyPix","tf","tfBodyPix","loadBodyPix","useTFLite","setTFLite","tfliteSIMD","setTFLiteSIMD","selectedTFLite","setSelectedTFLite","setSIMDSupported","createTFLiteModule","then","createTFLiteSIMDModule","createdTFLiteSIMD","warn","loadTFLite","promise","newSelectedTFLite","modelFileName","fetch","modelResponse","ok","arrayBuffer","modelBufferOffset","_getModelBufferMemoryOffset","HEAPU8","set","_loadModel","_getInputWidth","_getInputHeight","_getInputChannelCount","_getOutputWidth","_getOutputHeight","_getOutputChannelCount","loadMeetModel","gap","gridTemplateColumns","resourceSelectionCards","flexDirection","pick","App","setSourceConfig","setBackgroundConfig","setSegmentationConfig","setPostProcessingConfig","previousSegmentationConfig","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","CssBaseline","getElementById"],"mappings":"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","file":"static/js/main.2bc98430.chunk.js","sourcesContent":["/**\n * Returns a thumbnail as a Blob.\n * @param source The source image or video.\n * @param originalWidth The original width of the source before sizing.\n * @param originalHeight The original height of the source before sizing.\n */\nexport function getThumbnailBlob(\n  source: HTMLImageElement | HTMLVideoElement,\n  originalWidth: number,\n  originalHeight: number\n) {\n  const sourceSize = Math.min(originalWidth, originalHeight)\n  const horizontalShift = (originalWidth - sourceSize) / 2\n  const verticalShift = (originalHeight - sourceSize) / 2\n\n  const canvas = document.createElement('canvas')\n  canvas.width = 63\n  canvas.height = 63\n  const ctx = canvas.getContext('2d')!\n  ctx.drawImage(\n    source,\n    horizontalShift,\n    verticalShift,\n    sourceSize,\n    sourceSize,\n    0,\n    0,\n    canvas.width,\n    canvas.height\n  )\n\n  return new Promise<Blob | null>((resolve) =>\n    canvas.toBlob((blob) => resolve(blob))\n  )\n}\n","import { useEffect, useState } from 'react'\nimport { getThumbnailBlob } from '../helpers/thumbnailHelper'\n\n/**\n * Returns an image thumbnail URL and a function to revoke it.\n */\nfunction useImageThumbnail(imageUrl: string): [string | undefined, () => void] {\n  const [thumbnailUrl, setThumbnailUrl] = useState<string>()\n\n  useEffect(() => {\n    const image = new Image()\n    image.src = imageUrl\n    image.onload = async () => {\n      const blob = await getThumbnailBlob(\n        image,\n        image.naturalWidth,\n        image.naturalHeight\n      )\n      setThumbnailUrl(URL.createObjectURL(blob))\n    }\n  }, [imageUrl])\n\n  return [thumbnailUrl, () => URL.revokeObjectURL(thumbnailUrl!)]\n}\n\nexport default useImageThumbnail\n","import Button from '@material-ui/core/Button'\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles'\nimport clsx from 'clsx'\n\ntype SelectionButtonProps = {\n  active: boolean\n  disabled?: boolean\n  children: React.ReactNode\n  onClick: () => void\n}\n\nfunction SelectionButton(props: SelectionButtonProps) {\n  const classes = useStyles()\n\n  return (\n    <Button\n      className={clsx(classes.root, props.active && classes.active)}\n      disabled={props.disabled}\n      onClick={props.onClick}\n    >\n      {props.children}\n    </Button>\n  )\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      padding: 0,\n      minWidth: theme.spacing(7) + 2,\n      height: theme.spacing(7) + 2,\n      width: theme.spacing(7) + 2,\n      marginRight: theme.spacing(1),\n      marginBottom: theme.spacing(1),\n      border: '2px solid transparent',\n      alignItems: 'stretch',\n      transitionProperty: 'transform, border-color',\n      transitionDuration: `${theme.transitions.duration.shorter}ms`,\n      transitionTimingFunction: theme.transitions.easing.easeInOut,\n\n      '&:hover': {\n        transform: 'scale(1.125)',\n      },\n    },\n    active: {\n      borderColor: theme.palette.primary.main,\n      transform: 'scale(1.125)',\n    },\n  })\n)\n\nexport default SelectionButton\n","import { createStyles, makeStyles, Theme } from '@material-ui/core/styles'\nimport Skeleton from '@material-ui/lab/Skeleton'\nimport clsx from 'clsx'\nimport SelectionButton from './SelectionButton'\n\ntype ThumbnailButtonProps = {\n  thumbnailUrl?: string\n  active: boolean\n  children?: React.ReactNode\n  onClick: () => void\n  onLoad?: () => void\n}\n\nfunction ThumbnailButton(props: ThumbnailButtonProps) {\n  const classes = useStyles()\n\n  return (\n    <SelectionButton\n      active={!!props.thumbnailUrl && props.active}\n      disabled={!props.thumbnailUrl}\n      onClick={props.onClick}\n    >\n      {props.thumbnailUrl ? (\n        <img\n          className={clsx(classes.scalableContent, classes.image)}\n          src={props.thumbnailUrl}\n          alt=\"\"\n          onLoad={props.onLoad}\n        />\n      ) : (\n        <Skeleton className={classes.scalableContent} variant=\"rect\" />\n      )}\n      {props.children}\n    </SelectionButton>\n  )\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    scalableContent: {\n      // Fixes rendering issues with border when scaled\n      width: 'calc(100% + 2px)',\n      height: 'calc(100% + 2px)',\n      margin: -1,\n      borderRadius: theme.shape.borderRadius,\n    },\n    image: {\n      objectFit: 'cover',\n    },\n  })\n)\n\nexport default ThumbnailButton\n","import useImageThumbnail from '../hooks/useImageThumbnail'\nimport ThumbnailButton from './TumbnailButton'\n\ntype ImageButtonProps = {\n  imageUrl: string\n  active: boolean\n  onClick: () => void\n}\n\nfunction ImageButton(props: ImageButtonProps) {\n  const [thumbnailUrl, revokeThumbnailUrl] = useImageThumbnail(props.imageUrl)\n\n  return (\n    <ThumbnailButton\n      thumbnailUrl={thumbnailUrl}\n      active={props.active}\n      onClick={props.onClick}\n      onLoad={revokeThumbnailUrl}\n    />\n  )\n}\n\nexport default ImageButton\n","import { createStyles, makeStyles, Theme } from '@material-ui/core/styles'\nimport SelectionButton from './SelectionButton'\n\ntype SelectionIconButtonProps = {\n  active: boolean\n  children: React.ReactNode\n  onClick: () => void\n}\n\nfunction SelectionIconButton(props: SelectionIconButtonProps) {\n  const classes = useStyles()\n\n  return (\n    <SelectionButton active={props.active} onClick={props.onClick}>\n      <div className={classes.root}>{props.children}</div>\n    </SelectionButton>\n  )\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      width: '100%',\n      height: '100%',\n      borderWidth: 1,\n      borderStyle: 'solid',\n      borderColor: 'rgba(0, 0, 0, 0.23)',\n      borderRadius: theme.shape.borderRadius,\n      margin: -1,\n      boxSizing: 'content-box',\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center',\n    },\n  })\n)\n\nexport default SelectionIconButton\n","export type BackgroundConfig = {\n  type: 'none' | 'blur' | 'image'\n  url?: string\n  image?: HTMLImageElement\n}\n\nexport const backgroundImageUrls = [\n  'architecture-5082700_1280',\n  'porch-691330_1280',\n  'saxon-switzerland-539418_1280',\n  'shibuyasky-4768679_1280',\n].map((imageName) => `${process.env.PUBLIC_URL}/backgrounds/${imageName}.jpg`)\n","import Card from '@material-ui/core/Card'\nimport CardContent from '@material-ui/core/CardContent'\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles'\nimport Typography from '@material-ui/core/Typography'\nimport BlockIcon from '@material-ui/icons/Block'\nimport BlurOnIcon from '@material-ui/icons/BlurOn'\nimport ImageButton from '../../shared/components/ImageButton'\nimport SelectionIconButton from '../../shared/components/SelectionIconButton'\nimport {\n  BackgroundConfig,\n  backgroundImageUrls,\n} from '../helpers/backgroundHelper'\n\ntype BackgroundConfigCardProps = {\n  config: BackgroundConfig\n  onChange: (config: BackgroundConfig) => void\n}\n\nfunction BackgroundConfigCard(props: BackgroundConfigCardProps) {\n  const classes = useStyles()\n\n  return (\n    <Card className={classes.root}>\n      <CardContent>\n        <Typography gutterBottom variant=\"h6\" component=\"h2\">\n          Background\n        </Typography>\n        <SelectionIconButton\n          active={props.config.type === 'none'}\n          onClick={() => props.onChange({ type: 'none' })}\n        >\n          <BlockIcon />\n        </SelectionIconButton>\n        <SelectionIconButton\n          active={props.config.type === 'blur'}\n          onClick={() => props.onChange({ type: 'blur' })}\n        >\n          <BlurOnIcon />\n        </SelectionIconButton>\n        {backgroundImageUrls.map((imageUrl) => (\n          <ImageButton\n            key={imageUrl}\n            imageUrl={imageUrl}\n            active={imageUrl === props.config.url}\n            onClick={() =>\n              props.onChange({\n                type: 'image',\n                url: imageUrl,\n                image: Object.assign(new Image(), { src: imageUrl }),\n              })\n            }\n          />\n        ))}\n      </CardContent>\n    </Card>\n  )\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      flex: 1,\n    },\n  })\n)\n\nexport default BackgroundConfigCard\n","import Card from '@material-ui/core/Card'\nimport CardContent from '@material-ui/core/CardContent'\nimport FormControl from '@material-ui/core/FormControl'\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\nimport InputLabel from '@material-ui/core/InputLabel'\nimport MenuItem from '@material-ui/core/MenuItem'\nimport Select from '@material-ui/core/Select'\nimport Slider from '@material-ui/core/Slider'\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles'\nimport Switch from '@material-ui/core/Switch'\nimport Typography from '@material-ui/core/Typography'\nimport React, { ChangeEvent } from 'react'\nimport {\n  BlendMode,\n  PostProcessingConfig,\n} from '../helpers/postProcessingHelper'\nimport { PipelineName } from '../helpers/segmentationHelper'\n\ntype PostProcessingConfigCardProps = {\n  config: PostProcessingConfig\n  pipeline: PipelineName\n  onChange: (config: PostProcessingConfig) => void\n}\n\nfunction PostProcessingConfigCard(props: PostProcessingConfigCardProps) {\n  const classes = useStyles()\n\n  function handleSmoothSegmentationMaskChange(\n    event: ChangeEvent<HTMLInputElement>\n  ) {\n    props.onChange({\n      ...props.config,\n      smoothSegmentationMask: event.target.checked,\n    })\n  }\n\n  function handleImageLayerChange(event: ChangeEvent<HTMLInputElement>) {\n    props.onChange({\n      ...props.config,\n      useImageLayer: event.target.checked,\n    })\n  }\n\n  function handleSigmaSpaceChange(_event: any, value: number | number[]) {\n    props.onChange({\n      ...props.config,\n      jointBilateralFilter: {\n        ...props.config.jointBilateralFilter,\n        sigmaSpace: value as number,\n      },\n    })\n  }\n\n  function handleSigmaColorChange(_event: any, value: number | number[]) {\n    props.onChange({\n      ...props.config,\n      jointBilateralFilter: {\n        ...props.config.jointBilateralFilter,\n        sigmaColor: value as number,\n      },\n    })\n  }\n\n  function handleCoverageChange(_event: any, value: number | number[]) {\n    props.onChange({\n      ...props.config,\n      coverage: value as [number, number],\n    })\n  }\n\n  function handleLightWrappingChange(_event: any, value: number | number[]) {\n    props.onChange({\n      ...props.config,\n      lightWrapping: value as number,\n    })\n  }\n\n  function handleBlendModeChange(event: ChangeEvent<{ value: unknown }>) {\n    props.onChange({\n      ...props.config,\n      blendMode: event.target.value as BlendMode,\n    })\n  }\n\n  return (\n    <Card>\n      <CardContent>\n        <Typography gutterBottom variant=\"h6\" component=\"h2\">\n          Post-processing\n        </Typography>\n        {props.pipeline === 'webgl2' ? (\n          <React.Fragment>\n            <Typography gutterBottom>Joint bilateral filter</Typography>\n            <Typography variant=\"body2\">Sigma space</Typography>\n            <Slider\n              value={props.config.jointBilateralFilter.sigmaSpace}\n              min={0}\n              max={10}\n              step={0.1}\n              valueLabelDisplay=\"auto\"\n              onChange={handleSigmaSpaceChange}\n            />\n            <Typography variant=\"body2\">Sigma color</Typography>\n            <Slider\n              value={props.config.jointBilateralFilter.sigmaColor}\n              min={0}\n              max={1}\n              step={0.01}\n              valueLabelDisplay=\"auto\"\n              onChange={handleSigmaColorChange}\n            />\n            <Typography gutterBottom>Background</Typography>\n            <Typography variant=\"body2\">Coverage</Typography>\n            <Slider\n              value={props.config.coverage}\n              min={0}\n              max={1}\n              step={0.01}\n              valueLabelDisplay=\"auto\"\n              onChange={handleCoverageChange}\n            />\n            <Typography variant=\"body2\" gutterBottom>\n              Light wrapping\n            </Typography>\n            <div className={classes.lightWrapping}>\n              <FormControl className={classes.formControl} variant=\"outlined\">\n                <InputLabel>Blend mode</InputLabel>\n                <Select\n                  label=\"Blend mode\"\n                  value={props.config.blendMode}\n                  onChange={handleBlendModeChange}\n                >\n                  <MenuItem value=\"screen\">Screen</MenuItem>\n                  <MenuItem value=\"linearDodge\">Linear dodge</MenuItem>\n                </Select>\n              </FormControl>\n              <Slider\n                value={props.config.lightWrapping}\n                min={0}\n                max={1}\n                step={0.01}\n                valueLabelDisplay=\"auto\"\n                onChange={handleLightWrappingChange}\n              />\n            </div>\n          </React.Fragment>\n        ) : (\n          <React.Fragment>\n            <FormControlLabel\n              label=\"Smooth segmentation mask\"\n              control={\n                <Switch\n                  color=\"primary\"\n                  checked={props.config.smoothSegmentationMask}\n                  onChange={handleSmoothSegmentationMaskChange}\n                />\n              }\n            />\n            <FormControlLabel\n              label=\"Use Image Layer for background\"\n              control={\n                <Switch\n                  color=\"primary\"\n                  checked={props.config.useImageLayer}\n                  onChange={handleImageLayerChange}\n                />\n              }\n            />\n          </React.Fragment>\n        )}\n      </CardContent>\n    </Card>\n  )\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    lightWrapping: {\n      display: 'flex',\n      alignItems: 'center',\n    },\n    formControl: {\n      marginTop: theme.spacing(2),\n      marginBottom: theme.spacing(1),\n      marginRight: theme.spacing(2),\n      minWidth: 160,\n    },\n  })\n)\n\nexport default PostProcessingConfigCard\n","export type SegmentationModel = 'bodyPix' | 'meet'\nexport type SegmentationBackend = 'webgl' | 'wasm' | 'wasmSimd'\nexport type InputResolution = '360p' | '144v2' | '96v2' | '144hd' | '144v3' | '96v3'\n\nexport const InputResolutions: {\n  [resolution in InputResolution]: [string, [number, number], number]\n} = {\n  '360p': ['', [640, 360], 0],\n  // 2020-12\n  '144hd': ['_segm_hd_gpu_v1093', [256, 144], 1],\n  '144v3': ['segm_full_sparse_v1008', [256, 144], 1],\n  '96v3': ['segm_lite_v1082', [160, 96], 1],\n  // 2020-10\n  '144v2': ['segm_full_v679', [256, 144], 2],\n  '96v2': ['segm_lite_v681', [160, 96], 2],\n}\n\nexport type PipelineName = 'canvas2dCpu' | 'webgl2'\n\nexport type SegmentationConfig = {\n  model: SegmentationModel\n  backend: SegmentationBackend\n  inputResolution: InputResolution\n  pipeline: PipelineName\n}\n","import Card from '@material-ui/core/Card'\nimport CardContent from '@material-ui/core/CardContent'\nimport FormControl from '@material-ui/core/FormControl'\nimport InputLabel from '@material-ui/core/InputLabel'\nimport MenuItem from '@material-ui/core/MenuItem'\nimport Select from '@material-ui/core/Select'\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles'\nimport Typography from '@material-ui/core/Typography'\nimport { ChangeEvent } from 'react'\nimport {\n  InputResolution,\n  InputResolutions,\n  PipelineName,\n  SegmentationBackend,\n  SegmentationConfig,\n  SegmentationModel,\n} from '../helpers/segmentationHelper'\n\ntype SegmentationConfigCardProps = {\n  config: SegmentationConfig\n  isSIMDSupported: boolean\n  onChange: (config: SegmentationConfig) => void\n}\n\nfunction SegmentationConfigCard(props: SegmentationConfigCardProps) {\n  const classes = useStyles()\n\n  function handleModelChange(event: ChangeEvent<{ value: unknown }>) {\n    const model = event.target.value as SegmentationModel\n    let backend = props.config.backend\n    let inputResolution = props.config.inputResolution\n    if (model === 'meet') {\n      backend = 'wasm'\n      if (inputResolution === '360p') {\n        inputResolution = '144v2'\n      }\n    } else if (model === 'bodyPix') {\n      backend = 'webgl'\n      inputResolution = '360p'\n    }\n    let pipeline = props.config.pipeline\n    if (model === 'bodyPix' && pipeline === 'webgl2') {\n      pipeline = 'canvas2dCpu'\n    }\n    props.onChange({\n      ...props.config,\n      model,\n      backend,\n      inputResolution,\n      pipeline,\n    })\n  }\n\n  function handleBackendChange(event: ChangeEvent<{ value: unknown }>) {\n    props.onChange({\n      ...props.config,\n      backend: event.target.value as SegmentationBackend,\n    })\n  }\n\n  function handleInputResolutionChange(event: ChangeEvent<{ value: unknown }>) {\n    props.onChange({\n      ...props.config,\n      inputResolution: event.target.value as InputResolution,\n    })\n  }\n\n  function handlePipelineChange(event: ChangeEvent<{ value: unknown }>) {\n    props.onChange({\n      ...props.config,\n      pipeline: event.target.value as PipelineName,\n    })\n  }\n\n  return (\n    <Card className={classes.root}>\n      <CardContent>\n        <Typography gutterBottom variant=\"h6\" component=\"h2\">\n          Segmentation\n        </Typography>\n        <div className={classes.formControls}>\n          <FormControl className={classes.formControl} variant=\"outlined\">\n            <InputLabel>Model</InputLabel>\n            <Select\n              label=\"Model\"\n              value={props.config.model}\n              onChange={handleModelChange}\n            >\n              <MenuItem value=\"meet\">Meet</MenuItem>\n              <MenuItem value=\"bodyPix\">BodyPix</MenuItem>\n            </Select>\n          </FormControl>\n          <FormControl className={classes.formControl} variant=\"outlined\">\n            <InputLabel>Backend</InputLabel>\n            <Select\n              label=\"Backend\"\n              value={props.config.backend}\n              onChange={handleBackendChange}\n            >\n              <MenuItem\n                value=\"wasm\"\n                disabled={props.config.model === 'bodyPix'}\n              >\n                WebAssembly\n              </MenuItem>\n              <MenuItem\n                value=\"wasmSimd\"\n                disabled={\n                  props.config.model === 'bodyPix' || !props.isSIMDSupported\n                }\n              >\n                WebAssembly SIMD\n              </MenuItem>\n              <MenuItem value=\"webgl\" disabled={props.config.model === 'meet'}>\n                WebGL\n              </MenuItem>\n            </Select>\n          </FormControl>\n          <FormControl className={classes.formControl} variant=\"outlined\">\n            <InputLabel>Input resolution</InputLabel>\n            <Select\n              label=\"Input resolution\"\n              value={props.config.inputResolution}\n              onChange={handleInputResolutionChange}\n            >\n              {Object.keys(InputResolutions)\n                .sort((a, b) => parseInt(a, 10) - parseInt(b, 10))\n                .reverse()\n                .map((res: any) => {\n                  return (\n                    <MenuItem\n                      key={res}\n                      value={res}\n                      disabled={\n                        props.config.model === 'meet'\n                          ? res === '360p'\n                          : res !== '360p'\n                      }\n                    >\n                      {res}\n                    </MenuItem>\n                  )\n                })}\n            </Select>\n          </FormControl>\n          <FormControl className={classes.formControl} variant=\"outlined\">\n            <InputLabel>Pipeline</InputLabel>\n            <Select\n              label=\"Pipeline\"\n              value={props.config.pipeline}\n              onChange={handlePipelineChange}\n            >\n              <MenuItem\n                value=\"webgl2\"\n                disabled={props.config.model === 'bodyPix'}\n              >\n                WebGL 2\n              </MenuItem>\n              <MenuItem value=\"canvas2dCpu\">Canvas 2D + CPU</MenuItem>\n            </Select>\n          </FormControl>\n        </div>\n      </CardContent>\n    </Card>\n  )\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      [theme.breakpoints.only('md')]: {\n        gridColumnStart: 2,\n        gridRowStart: 2,\n      },\n    },\n    formControls: {\n      display: 'flex',\n      flexWrap: 'wrap',\n    },\n    formControl: {\n      marginTop: theme.spacing(1),\n      marginBottom: theme.spacing(1),\n      marginRight: theme.spacing(2),\n      minWidth: 200,\n      flex: 1,\n    },\n  })\n)\n\nexport default SegmentationConfigCard\n","import { useEffect, useState } from 'react'\nimport { getThumbnailBlob } from '../helpers/thumbnailHelper'\n\n/**\n * Returns a video thumbnail URL and a function to revoke it.\n */\nfunction useVideoThumbnail(videoUrl: string): [string | undefined, () => void] {\n  const [thumbnailUrl, setThumbnailUrl] = useState<string>()\n\n  useEffect(() => {\n    const video = document.createElement('video')\n    video.src = videoUrl\n    video.onloadedmetadata = () => {\n      video.currentTime = video.duration / 2\n    }\n    video.onseeked = async () => {\n      const blob = await getThumbnailBlob(\n        video,\n        video.videoWidth,\n        video.videoHeight\n      )\n      setThumbnailUrl(URL.createObjectURL(blob))\n    }\n  }, [videoUrl])\n\n  return [thumbnailUrl, () => URL.revokeObjectURL(thumbnailUrl!)]\n}\n\nexport default useVideoThumbnail\n","import { createStyles, makeStyles, Theme } from '@material-ui/core/styles'\nimport PlayCircleOutlineIcon from '@material-ui/icons/PlayCircleOutline'\nimport useVideoThumbnail from '../hooks/useVideoThumbnail'\nimport ThumbnailButton from './TumbnailButton'\n\ntype VideoButtonProps = {\n  videoUrl: string\n  active: boolean\n  onClick: () => void\n}\n\nfunction VideoButton(props: VideoButtonProps) {\n  const classes = useStyles()\n  const [thumbnailUrl, revokeThumbnailUrl] = useVideoThumbnail(props.videoUrl)\n\n  return (\n    <ThumbnailButton\n      thumbnailUrl={thumbnailUrl}\n      active={props.active}\n      onClick={props.onClick}\n      onLoad={revokeThumbnailUrl}\n    >\n      <PlayCircleOutlineIcon className={classes.icon} />\n    </ThumbnailButton>\n  )\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    icon: {\n      position: 'absolute',\n      bottom: 0,\n      right: 0,\n      color: theme.palette.common.white,\n    },\n  })\n)\n\nexport default VideoButton\n","export type SourceConfig = {\n  type: 'image' | 'video' | 'camera'\n  url?: string\n  resolution?: number\n}\n\nexport type SourcePlayback = {\n  htmlElement: HTMLImageElement | HTMLVideoElement\n  width: number\n  height: number\n}\n\nexport type StreamPlayback = {\n  canvasStream: MediaStream\n}\n\nexport const sourceImageUrls = [\n  'girl-919048_1280',\n  'doctor-5871743_640',\n  'woman-5883428_1280',\n].map((imageName) => `${process.env.PUBLIC_URL}/images/${imageName}.jpg`)\n\nexport const sourceVideoUrls = [\n  'Dance - 32938',\n  'Doctor - 26732',\n  'Thoughtful - 35590',\n].map((videoName) => `${process.env.PUBLIC_URL}/videos/${videoName}.mp4`)\n","import Card from '@material-ui/core/Card'\nimport CardContent from '@material-ui/core/CardContent'\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles'\nimport Typography from '@material-ui/core/Typography'\nimport VideocamIcon from '@material-ui/icons/Videocam'\nimport ImageButton from '../../shared/components/ImageButton'\nimport SelectionIconButton from '../../shared/components/SelectionIconButton'\nimport VideoButton from '../../shared/components/VideoButton'\nimport {\n  SourceConfig,\n  sourceImageUrls,\n  sourceVideoUrls,\n} from '../helpers/sourceHelper'\n\ntype SourceConfigCardProps = {\n  config: SourceConfig\n  onChange: (config: SourceConfig) => void\n}\n\nfunction SourceConfigCard(props: SourceConfigCardProps) {\n  const classes = useStyles()\n\n  return (\n    <Card className={classes.root}>\n      <CardContent>\n        <Typography gutterBottom variant=\"h6\" component=\"h2\">\n          Source\n        </Typography>\n        <SelectionIconButton\n          key={'360'}\n          active={\n            props.config.type === 'camera' && props.config.resolution === 360\n          }\n          onClick={() => props.onChange({ type: 'camera', resolution: 360 })}\n        >\n          <VideocamIcon />\n          360\n        </SelectionIconButton>\n        <SelectionIconButton\n          key={'540'}\n          active={\n            props.config.type === 'camera' && props.config.resolution === 540\n          }\n          onClick={() => props.onChange({ type: 'camera', resolution: 540 })}\n        >\n          <VideocamIcon />\n          540\n        </SelectionIconButton>\n        <SelectionIconButton\n          key={'720'}\n          active={\n            props.config.type === 'camera' && props.config.resolution === 720\n          }\n          onClick={() => props.onChange({ type: 'camera', resolution: 720 })}\n        >\n          <VideocamIcon />\n          720\n        </SelectionIconButton>\n        {sourceImageUrls.map((imageUrl) => (\n          <ImageButton\n            key={imageUrl}\n            imageUrl={imageUrl}\n            active={imageUrl === props.config.url}\n            onClick={() => props.onChange({ type: 'image', url: imageUrl })}\n          />\n        ))}\n        {sourceVideoUrls.map((videoUrl) => (\n          <VideoButton\n            key={videoUrl}\n            videoUrl={videoUrl}\n            active={videoUrl === props.config.url}\n            onClick={() => props.onChange({ type: 'video', url: videoUrl })}\n          />\n        ))}\n      </CardContent>\n    </Card>\n  )\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      flex: 1,\n    },\n  })\n)\n\nexport default SourceConfigCard\n","import { createStyles, makeStyles, Theme, Typography } from '@material-ui/core'\nimport React, { useEffect, useRef } from 'react'\nimport { StreamPlayback } from '../helpers/sourceHelper'\n\ntype OutputStreamViewerProps = {\n  streamPlayback: StreamPlayback\n}\n\ndeclare global {\n  interface HTMLCanvasElement {\n    captureStream(frameRate?: number): MediaStream\n  }\n}\nfunction OutputStreamViewer(props: OutputStreamViewerProps) {\n  const classes = useStyles()\n  const videoRef = useRef<HTMLVideoElement>(null)\n\n  useEffect(() => {\n    if (videoRef.current) {\n      videoRef.current.srcObject = props.streamPlayback.canvasStream\n    }\n  }, [props.streamPlayback])\n\n  return (\n    <div className={classes.root}>\n      <video\n        ref={videoRef}\n        className={classes.playback}\n        autoPlay\n        playsInline\n        controls={false}\n        muted\n      />\n      <Typography className={classes.stats} variant=\"caption\">\n        Video Output\n      </Typography>\n    </div>\n  )\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      flex: 1,\n      position: 'relative',\n    },\n    render: {\n      position: 'absolute',\n      width: '100%',\n      height: '100%',\n      objectFit: 'cover',\n    },\n    stats: {\n      position: 'absolute',\n      top: 0,\n      right: 0,\n      left: 0,\n      textAlign: 'center',\n      backgroundColor: 'rgba(0, 0, 0, 0.48)',\n      color: theme.palette.common.white,\n    },\n    playback: {\n      position: 'absolute',\n      width: '100%',\n      height: '100%',\n      objectFit: 'cover',\n    },\n  })\n)\n\nexport default OutputStreamViewer\n","import { BodyPix } from '@tensorflow-models/body-pix'\nimport { BackgroundConfig } from '../../core/helpers/backgroundHelper'\nimport { PostProcessingConfig } from '../../core/helpers/postProcessingHelper'\nimport {\n  InputResolutions,\n  SegmentationConfig\n} from '../../core/helpers/segmentationHelper'\nimport { SourcePlayback } from '../../core/helpers/sourceHelper'\nimport { TFLite } from '../../core/hooks/useTFLite'\n\nexport function buildCanvas2dPipeline(\n  sourcePlayback: SourcePlayback,\n  backgroundConfig: BackgroundConfig,\n  segmentationConfig: SegmentationConfig,\n  canvas: HTMLCanvasElement,\n  bodyPix: BodyPix,\n  tflite: TFLite,\n  addFrameEvent: () => void\n) {\n  const ctx = canvas.getContext('2d', { desynchronized: true })!\n  ctx.imageSmoothingEnabled = true;\n  ctx.imageSmoothingQuality = 'low';\n\n  const [segmentationWidth, segmentationHeight] = InputResolutions[\n    segmentationConfig.inputResolution\n  ][1]\n  const segmentationPixelCount = segmentationWidth * segmentationHeight\n  const segmentationMask = new ImageData(segmentationWidth, segmentationHeight)\n  const segmentationMaskCanvas = document.createElement('canvas')\n  segmentationMaskCanvas.width = segmentationWidth\n  segmentationMaskCanvas.height = segmentationHeight\n  const segmentationMaskCtx = segmentationMaskCanvas.getContext('2d')!\n\n  const inputMemoryOffset = tflite._getInputMemoryOffset() / 4\n  const outputMemoryOffset = tflite._getOutputMemoryOffset() / 4\n\n  let postProcessingConfig: PostProcessingConfig\n\n  async function render() {\n    if (backgroundConfig.type !== 'none') {\n      resizeSource()\n    }\n\n    addFrameEvent()\n\n    if (backgroundConfig.type !== 'none') {\n      if (segmentationConfig.model === 'bodyPix') {\n        await runBodyPixInference()\n      } else {\n        runTFLiteInference()\n      }\n    }\n\n    addFrameEvent()\n\n    runPostProcessing()\n  }\n\n  function updatePostProcessingConfig(\n    newPostProcessingConfig: PostProcessingConfig\n  ) {\n    postProcessingConfig = newPostProcessingConfig\n  }\n\n  function cleanUp() {\n    // Nothing to clean up in this rendering pipeline\n  }\n\n  function resizeSource() {\n    segmentationMaskCtx.drawImage(\n      sourcePlayback.htmlElement,\n      0,\n      0,\n      sourcePlayback.width,\n      sourcePlayback.height,\n      0,\n      0,\n      segmentationWidth,\n      segmentationHeight\n    )\n\n    if (segmentationConfig.model === 'meet') {\n      const imageData = segmentationMaskCtx.getImageData(\n        0,\n        0,\n        segmentationWidth,\n        segmentationHeight\n      )\n\n      for (let i = 0; i < segmentationPixelCount; i++) {\n        for (let j = 0; j < 3; j++) {\n          tflite.HEAPF32[inputMemoryOffset + i * 3 + j] = imageData.data[i * 4 + j] / 255\n        }\n      }\n    }\n  }\n\n  async function runBodyPixInference() {\n    const segmentation = await bodyPix.segmentPerson(segmentationMaskCanvas)\n    for (let i = 0; i < segmentationPixelCount; i++) {\n      // Sets only the alpha component of each pixel\n      segmentationMask.data[i * 4 + 3] = segmentation.data[i] ? 255 : 0\n    }\n    segmentationMaskCtx.putImageData(segmentationMask, 0, 0)\n  }\n\n  function runTFLiteInference() {\n    tflite._runInference()\n\n    const outputChannels = InputResolutions[segmentationConfig.inputResolution][2]\n    for (let i = 0; i < segmentationPixelCount; i++) {\n      let mask;\n      const pos = outputMemoryOffset + i * outputChannels\n      if (outputChannels === 1) {\n        const person = tflite.HEAPF32[pos]\n        mask = person;\n      } else {\n        const background = tflite.HEAPF32[pos]\n        const person = tflite.HEAPF32[pos + 1]\n        const shift = Math.max(background, person)\n        const backgroundExp = Math.exp(background - shift)\n        const personExp = Math.exp(person - shift)\n        mask = personExp / (backgroundExp + personExp) // softmax\n      }\n      // Sets only the alpha component of each pixel\n      segmentationMask.data[i * 4 + 3] = 255 * mask;\n    }\n    segmentationMaskCtx.putImageData(segmentationMask, 0, 0)\n  }\n\n  function runPostProcessing() {\n    ctx.globalCompositeOperation = 'copy'\n    ctx.filter = 'none'\n\n    if (postProcessingConfig?.smoothSegmentationMask) {\n      if (backgroundConfig.type === 'blur') {\n        ctx.filter = 'blur(8px)' // FIXME Does not work on Safari\n      } else if (backgroundConfig.type === 'image') {\n        ctx.filter = 'blur(4px)' // FIXME Does not work on Safari\n      }\n    }\n\n    if (backgroundConfig.type !== 'none') {\n      drawSegmentationMask()\n      ctx.globalCompositeOperation = 'source-in'\n      ctx.filter = 'none'\n    }\n\n    ctx.drawImage(sourcePlayback.htmlElement, 0, 0)\n    blurBackground(backgroundConfig.type === 'blur')\n  }\n\n  function drawSegmentationMask() {\n    ctx.drawImage(\n      segmentationMaskCanvas,\n      0,\n      0,\n      segmentationWidth,\n      segmentationHeight,\n      0,\n      0,\n      sourcePlayback.width,\n      sourcePlayback.height\n    )\n  }\n\n  function blurBackground(blur: boolean) {\n    ctx.globalCompositeOperation = 'destination-over'\n    if (blur) {\n      ctx.filter = 'blur(8px)' // FIXME Does not work on Safari\n      ctx.drawImage(sourcePlayback.htmlElement, 0, 0)\n    } else if (!postProcessingConfig?.useImageLayer) {\n      const img = backgroundConfig.image;\n      if (img) {\n        ctx.drawImage(img, 0, 0, canvas.width, canvas.height)\n      }\n    }\n  }\n\n  return { render, updatePostProcessingConfig, cleanUp }\n}\n","/**\n * Use it along with boyswan.glsl-literal VSCode extension\n * to get GLSL syntax highlighting.\n * https://marketplace.visualstudio.com/items?itemName=boyswan.glsl-literal\n *\n * On VSCode OSS, boyswan.glsl-literal requires slevesque.shader extension\n * to be installed as well.\n * https://marketplace.visualstudio.com/items?itemName=slevesque.shader\n */\nexport const glsl = String.raw\n\nexport function createPiplelineStageProgram(\n  gl: WebGL2RenderingContext,\n  vertexShader: WebGLShader,\n  fragmentShader: WebGLShader,\n  positionBuffer: WebGLBuffer,\n  texCoordBuffer: WebGLBuffer\n) {\n  const program = createProgram(gl, vertexShader, fragmentShader)\n\n  const positionAttributeLocation = gl.getAttribLocation(program, 'a_position')\n  gl.enableVertexAttribArray(positionAttributeLocation)\n  gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer)\n  gl.vertexAttribPointer(positionAttributeLocation, 2, gl.FLOAT, false, 0, 0)\n\n  const texCoordAttributeLocation = gl.getAttribLocation(program, 'a_texCoord')\n  gl.enableVertexAttribArray(texCoordAttributeLocation)\n  gl.bindBuffer(gl.ARRAY_BUFFER, texCoordBuffer)\n  gl.vertexAttribPointer(texCoordAttributeLocation, 2, gl.FLOAT, false, 0, 0)\n\n  return program\n}\n\nexport function createProgram(\n  gl: WebGL2RenderingContext,\n  vertexShader: WebGLShader,\n  fragmentShader: WebGLShader\n) {\n  const program = gl.createProgram()!\n  gl.attachShader(program, vertexShader)\n  gl.attachShader(program, fragmentShader)\n  gl.linkProgram(program)\n  if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\n    throw new Error(\n      `Could not link WebGL program: ${gl.getProgramInfoLog(program)}`\n    )\n  }\n  return program\n}\n\nexport function compileShader(\n  gl: WebGL2RenderingContext,\n  shaderType: number,\n  shaderSource: string\n) {\n  const shader = gl.createShader(shaderType)!\n  gl.shaderSource(shader, shaderSource)\n  gl.compileShader(shader)\n  if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n    throw new Error(`Could not compile shader: ${gl.getShaderInfoLog(shader)}`)\n  }\n  return shader\n}\n\nexport function createTexture(\n  gl: WebGL2RenderingContext,\n  internalformat: number,\n  width: number,\n  height: number,\n  minFilter = gl.NEAREST,\n  magFilter = gl.NEAREST\n) {\n  const texture = gl.createTexture()\n  gl.bindTexture(gl.TEXTURE_2D, texture)\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE)\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE)\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, minFilter)\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, magFilter)\n  gl.texStorage2D(gl.TEXTURE_2D, 1, internalformat, width, height)\n  return texture\n}\n\nexport async function readPixelsAsync(\n  gl: WebGL2RenderingContext,\n  x: number,\n  y: number,\n  width: number,\n  height: number,\n  format: number,\n  type: number,\n  dest: ArrayBufferView\n) {\n  const buf = gl.createBuffer()!\n  gl.bindBuffer(gl.PIXEL_PACK_BUFFER, buf)\n  gl.bufferData(gl.PIXEL_PACK_BUFFER, dest.byteLength, gl.STREAM_READ)\n  gl.readPixels(x, y, width, height, format, type, 0)\n  gl.bindBuffer(gl.PIXEL_PACK_BUFFER, null)\n\n  await getBufferSubDataAsync(gl, gl.PIXEL_PACK_BUFFER, buf, 0, dest)\n\n  gl.deleteBuffer(buf)\n  return dest\n}\n\nasync function getBufferSubDataAsync(\n  gl: WebGL2RenderingContext,\n  target: number,\n  buffer: WebGLBuffer,\n  srcByteOffset: number,\n  dstBuffer: ArrayBufferView,\n  dstOffset?: number,\n  length?: number\n) {\n  const sync = gl.fenceSync(gl.SYNC_GPU_COMMANDS_COMPLETE, 0)!\n  gl.flush()\n  const res = await clientWaitAsync(gl, sync)\n  gl.deleteSync(sync)\n\n  if (res !== gl.WAIT_FAILED) {\n    gl.bindBuffer(target, buffer)\n    gl.getBufferSubData(target, srcByteOffset, dstBuffer, dstOffset, length)\n    gl.bindBuffer(target, null)\n  }\n}\n\nfunction clientWaitAsync(gl: WebGL2RenderingContext, sync: WebGLSync) {\n  return new Promise<number>((resolve) => {\n    function test() {\n      const res = gl.clientWaitSync(sync, 0, 0)\n      if (res === gl.WAIT_FAILED) {\n        resolve(res)\n        return\n      }\n      if (res === gl.TIMEOUT_EXPIRED) {\n        requestAnimationFrame(test)\n        return\n      }\n      resolve(res)\n    }\n    requestAnimationFrame(test)\n  })\n}\n","import {\n  InputResolutions,\n  SegmentationConfig\n} from '../../core/helpers/segmentationHelper'\nimport { TFLite } from '../../core/hooks/useTFLite'\nimport {\n  compileShader,\n  createPiplelineStageProgram,\n  createTexture,\n  glsl,\n  readPixelsAsync\n} from '../helpers/webglHelper'\n\nexport function buildResizingStage(\n  gl: WebGL2RenderingContext,\n  vertexShader: WebGLShader,\n  positionBuffer: WebGLBuffer,\n  texCoordBuffer: WebGLBuffer,\n  segmentationConfig: SegmentationConfig,\n  tflite: TFLite\n) {\n  const fragmentShaderSource = glsl`#version 300 es\n\n    precision highp float;\n\n    uniform sampler2D u_inputFrame;\n\n    in vec2 v_texCoord;\n\n    out vec4 outColor;\n\n    void main() {\n      outColor = texture(u_inputFrame, v_texCoord);\n    }\n  `\n\n  // TFLite memory will be accessed as float32\n  const tfliteInputMemoryOffset = tflite._getInputMemoryOffset() / 4\n\n  const [outputWidth, outputHeight] = InputResolutions[\n    segmentationConfig.inputResolution\n  ][1]\n  const outputPixelCount = outputWidth * outputHeight\n\n  const fragmentShader = compileShader(\n    gl,\n    gl.FRAGMENT_SHADER,\n    fragmentShaderSource\n  )\n  const program = createPiplelineStageProgram(\n    gl,\n    vertexShader,\n    fragmentShader,\n    positionBuffer,\n    texCoordBuffer\n  )\n  const inputFrameLocation = gl.getUniformLocation(program, 'u_inputFrame')\n  const outputTexture = createTexture(gl, gl.RGBA8, outputWidth, outputHeight)\n\n  const frameBuffer = gl.createFramebuffer()\n  gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer)\n  gl.framebufferTexture2D(\n    gl.FRAMEBUFFER,\n    gl.COLOR_ATTACHMENT0,\n    gl.TEXTURE_2D,\n    outputTexture,\n    0\n  )\n  const outputPixels = new Uint8Array(outputPixelCount * 4)\n\n  gl.useProgram(program)\n  gl.uniform1i(inputFrameLocation, 0)\n\n  function render() {\n    gl.useProgram(program)\n    gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer)\n    gl.viewport(0, 0, outputWidth, outputHeight)\n    gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4)\n\n    // Downloads pixels asynchronously from GPU while rendering the current frame\n    readPixelsAsync(\n      gl,\n      0,\n      0,\n      outputWidth,\n      outputHeight,\n      gl.RGBA,\n      gl.UNSIGNED_BYTE,\n      outputPixels\n    )\n\n    for (let i = 0; i < outputPixelCount; i++) {\n      const tfliteIndex = tfliteInputMemoryOffset + i * 3\n      const outputIndex = i * 4\n      tflite.HEAPF32[tfliteIndex] = outputPixels[outputIndex] / 255\n      tflite.HEAPF32[tfliteIndex + 1] = outputPixels[outputIndex + 1] / 255\n      tflite.HEAPF32[tfliteIndex + 2] = outputPixels[outputIndex + 2] / 255\n    }\n  }\n\n  function cleanUp() {\n    gl.deleteFramebuffer(frameBuffer)\n    gl.deleteTexture(outputTexture)\n    gl.deleteProgram(program)\n    gl.deleteShader(fragmentShader)\n  }\n\n  return { render, cleanUp }\n}\n","import { BackgroundConfig } from '../../core/helpers/backgroundHelper'\nimport { PostProcessingConfig } from '../../core/helpers/postProcessingHelper'\nimport {\n  InputResolutions,\n  SegmentationConfig\n} from '../../core/helpers/segmentationHelper'\nimport { SourcePlayback } from '../../core/helpers/sourceHelper'\nimport { TFLite } from '../../core/hooks/useTFLite'\nimport { compileShader, createTexture, glsl } from '../helpers/webglHelper'\nimport { buildBackgroundBlurStage } from './backgroundBlurStage'\nimport {\n  BackgroundImageStage,\n  buildBackgroundImageStage\n} from './backgroundImageStage'\nimport { buildJointBilateralFilterStage } from './jointBilateralFilterStage'\nimport { buildResizingStage } from './resizingStage'\nimport { buildSoftmaxStage } from './softmaxStage'\n\nexport function buildWebGL2Pipeline(\n  sourcePlayback: SourcePlayback,\n  backgroundImage: HTMLImageElement | null,\n  backgroundConfig: BackgroundConfig,\n  segmentationConfig: SegmentationConfig,\n  canvas: HTMLCanvasElement,\n  tflite: TFLite,\n  addFrameEvent: () => void\n) {\n  const vertexShaderSource = glsl`#version 300 es\n\n    in vec2 a_position;\n    in vec2 a_texCoord;\n\n    out vec2 v_texCoord;\n\n    void main() {\n      gl_Position = vec4(a_position, 0.0, 1.0);\n      v_texCoord = a_texCoord;\n    }\n  `\n\n  const { width: frameWidth, height: frameHeight } = sourcePlayback\n  const [segmentationWidth, segmentationHeight] = InputResolutions[\n    segmentationConfig.inputResolution\n  ][1]\n\n  const gl = canvas.getContext('webgl2')!\n  if (!gl) {\n    // safari < TP114\n    return { render: async () => { }, updatePostProcessingConfig: () => { }, cleanUp: () => { } }\n  }\n\n  const vertexShader = compileShader(gl, gl.VERTEX_SHADER, vertexShaderSource)\n\n  const vertexArray = gl.createVertexArray()\n  gl.bindVertexArray(vertexArray)\n\n  const positionBuffer = gl.createBuffer()!\n  gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer)\n  gl.bufferData(\n    gl.ARRAY_BUFFER,\n    new Float32Array([-1.0, -1.0, 1.0, -1.0, -1.0, 1.0, 1.0, 1.0]),\n    gl.STATIC_DRAW\n  )\n\n  const texCoordBuffer = gl.createBuffer()!\n  gl.bindBuffer(gl.ARRAY_BUFFER, texCoordBuffer)\n  gl.bufferData(\n    gl.ARRAY_BUFFER,\n    new Float32Array([0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0]),\n    gl.STATIC_DRAW\n  )\n\n  // We don't use texStorage2D here because texImage2D seems faster\n  // to upload video texture than texSubImage2D even though the latter\n  // is supposed to be the recommended way:\n  // https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/WebGL_best_practices#use_texstorage_to_create_textures\n  const inputFrameTexture = gl.createTexture()\n  gl.bindTexture(gl.TEXTURE_2D, inputFrameTexture)\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE)\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE)\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST)\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST)\n\n  // TODO Rename segmentation and person mask to be more specific\n  const segmentationTexture = createTexture(\n    gl,\n    gl.RGBA8,\n    segmentationWidth,\n    segmentationHeight\n  )!\n  const personMaskTexture = createTexture(\n    gl,\n    gl.RGBA8,\n    frameWidth,\n    frameHeight\n  )!\n\n  const resizingStage = buildResizingStage(\n    gl,\n    vertexShader,\n    positionBuffer,\n    texCoordBuffer,\n    segmentationConfig,\n    tflite\n  )\n  const softmaxStage = buildSoftmaxStage(\n    gl,\n    vertexShader,\n    positionBuffer,\n    texCoordBuffer,\n    segmentationConfig,\n    tflite,\n    segmentationTexture\n  )\n  const jointBilateralFilterStage = buildJointBilateralFilterStage(\n    gl,\n    vertexShader,\n    positionBuffer,\n    texCoordBuffer,\n    segmentationTexture,\n    segmentationConfig,\n    personMaskTexture,\n    canvas\n  )\n  const backgroundStage =\n    backgroundConfig.type === 'blur'\n      ? buildBackgroundBlurStage(\n        gl,\n        positionBuffer,\n        texCoordBuffer,\n        personMaskTexture,\n        canvas\n      )\n      : buildBackgroundImageStage(\n        gl,\n        positionBuffer,\n        texCoordBuffer,\n        personMaskTexture,\n        backgroundImage,\n        canvas\n      )\n\n  async function render() {\n    gl.clearColor(0, 0, 0, 0)\n    gl.clear(gl.COLOR_BUFFER_BIT)\n\n    gl.activeTexture(gl.TEXTURE0)\n    gl.bindTexture(gl.TEXTURE_2D, inputFrameTexture)\n\n    // texImage2D seems faster than texSubImage2D to upload\n    // video texture\n    gl.texImage2D(\n      gl.TEXTURE_2D,\n      0,\n      gl.RGBA,\n      gl.RGBA,\n      gl.UNSIGNED_BYTE,\n      sourcePlayback.htmlElement\n    )\n\n    gl.bindVertexArray(vertexArray)\n\n    resizingStage.render()\n\n    addFrameEvent()\n\n    tflite._runInference()\n\n    addFrameEvent()\n\n    softmaxStage.render()\n    jointBilateralFilterStage.render()\n    backgroundStage.render()\n  }\n\n  function updatePostProcessingConfig(\n    postProcessingConfig: PostProcessingConfig\n  ) {\n    jointBilateralFilterStage.updateSigmaSpace(\n      postProcessingConfig.jointBilateralFilter.sigmaSpace\n    )\n    jointBilateralFilterStage.updateSigmaColor(\n      postProcessingConfig.jointBilateralFilter.sigmaColor\n    )\n    // TODO Handle no background in a separate pipeline path\n    if (backgroundConfig.type === 'none') {\n      const backgroundImageStage = backgroundStage as BackgroundImageStage\n      backgroundImageStage.updateCoverage([0, 0.9999])\n      backgroundImageStage.updateLightWrapping(0)\n    } else if (backgroundConfig.type === 'image') {\n      const backgroundImageStage = backgroundStage as BackgroundImageStage\n      backgroundImageStage.updateCoverage(postProcessingConfig.coverage)\n      backgroundImageStage.updateLightWrapping(\n        postProcessingConfig.lightWrapping\n      )\n      backgroundImageStage.updateBlendMode(postProcessingConfig.blendMode)\n    }\n  }\n\n  function cleanUp() {\n    backgroundStage.cleanUp()\n    jointBilateralFilterStage.cleanUp()\n    softmaxStage.cleanUp()\n    resizingStage.cleanUp()\n\n    gl.deleteTexture(personMaskTexture)\n    gl.deleteTexture(segmentationTexture)\n    gl.deleteTexture(inputFrameTexture)\n    gl.deleteBuffer(texCoordBuffer)\n    gl.deleteBuffer(positionBuffer)\n    gl.deleteVertexArray(vertexArray)\n    gl.deleteShader(vertexShader)\n  }\n\n  return { render, updatePostProcessingConfig, cleanUp }\n}\n","import {\n  InputResolutions,\n  SegmentationConfig\n} from '../../core/helpers/segmentationHelper'\nimport { TFLite } from '../../core/hooks/useTFLite'\nimport {\n  compileShader,\n  createPiplelineStageProgram,\n  createTexture,\n  glsl\n} from '../helpers/webglHelper'\n\nexport function buildSoftmaxStage(\n  gl: WebGL2RenderingContext,\n  vertexShader: WebGLShader,\n  positionBuffer: WebGLBuffer,\n  texCoordBuffer: WebGLBuffer,\n  segmentationConfig: SegmentationConfig,\n  tflite: TFLite,\n  outputTexture: WebGLTexture\n) {\n  const fragmentShaderSource = glsl`#version 300 es\n\n    precision highp float;\n\n    uniform sampler2D u_inputSegmentation;\n\n    in vec2 v_texCoord;\n\n    out vec4 outColor;\n\n    void main() {\n      vec2 segmentation = texture(u_inputSegmentation, v_texCoord).rg;\n      float shift = max(segmentation.r, segmentation.g);\n      float backgroundExp = exp(segmentation.r - shift);\n      float personExp = exp(segmentation.g - shift);\n      outColor = vec4(vec3(0.0), personExp / (backgroundExp + personExp));\n    }\n  `\n\n  // TFLite memory will be accessed as float32\n  const tfliteOutputMemoryOffset = tflite._getOutputMemoryOffset() / 4\n\n  const [segmentationWidth, segmentationHeight] = InputResolutions[\n    segmentationConfig.inputResolution\n  ][1]\n\n  const fragmentShader = compileShader(\n    gl,\n    gl.FRAGMENT_SHADER,\n    fragmentShaderSource\n  )\n  const program = createPiplelineStageProgram(\n    gl,\n    vertexShader,\n    fragmentShader,\n    positionBuffer,\n    texCoordBuffer\n  )\n  const inputLocation = gl.getUniformLocation(program, 'u_inputSegmentation')\n  const inputTexture = createTexture(\n    gl,\n    gl.RG32F,\n    segmentationWidth,\n    segmentationHeight\n  )\n\n  const frameBuffer = gl.createFramebuffer()\n  gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer)\n  gl.framebufferTexture2D(\n    gl.FRAMEBUFFER,\n    gl.COLOR_ATTACHMENT0,\n    gl.TEXTURE_2D,\n    outputTexture,\n    0\n  )\n\n  gl.useProgram(program)\n  gl.uniform1i(inputLocation, 1)\n\n  function render() {\n    gl.useProgram(program)\n    gl.activeTexture(gl.TEXTURE1)\n    gl.bindTexture(gl.TEXTURE_2D, inputTexture)\n    gl.texSubImage2D(\n      gl.TEXTURE_2D,\n      0,\n      0,\n      0,\n      segmentationWidth,\n      segmentationHeight,\n      gl.RG,\n      gl.FLOAT,\n      tflite.HEAPF32,\n      tfliteOutputMemoryOffset\n    )\n    gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer)\n    gl.viewport(0, 0, segmentationWidth, segmentationHeight)\n    gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4)\n  }\n\n  function cleanUp() {\n    gl.deleteFramebuffer(frameBuffer)\n    gl.deleteTexture(inputTexture)\n    gl.deleteProgram(program)\n    gl.deleteShader(fragmentShader)\n  }\n\n  return { render, cleanUp }\n}\n","import {\n  InputResolutions,\n  SegmentationConfig\n} from '../../core/helpers/segmentationHelper'\nimport {\n  compileShader,\n  createPiplelineStageProgram,\n  glsl\n} from '../helpers/webglHelper'\n\nexport function buildJointBilateralFilterStage(\n  gl: WebGL2RenderingContext,\n  vertexShader: WebGLShader,\n  positionBuffer: WebGLBuffer,\n  texCoordBuffer: WebGLBuffer,\n  inputTexture: WebGLTexture,\n  segmentationConfig: SegmentationConfig,\n  outputTexture: WebGLTexture,\n  canvas: HTMLCanvasElement\n) {\n  const fragmentShaderSource = glsl`#version 300 es\n\n    precision highp float;\n\n    uniform sampler2D u_inputFrame;\n    uniform sampler2D u_segmentationMask;\n    uniform vec2 u_texelSize;\n    uniform float u_step;\n    uniform float u_radius;\n    uniform float u_offset;\n    uniform float u_sigmaTexel;\n    uniform float u_sigmaColor;\n\n    in vec2 v_texCoord;\n\n    out vec4 outColor;\n\n    float gaussian(float x, float sigma) {\n      float coeff = -0.5 / (sigma * sigma * 4.0 + 1.0e-6);\n      return exp((x * x) * coeff);\n    }\n\n    void main() {\n      vec2 centerCoord = v_texCoord;\n      vec3 centerColor = texture(u_inputFrame, centerCoord).rgb;\n      float newVal = 0.0;\n\n      float spaceWeight = 0.0;\n      float colorWeight = 0.0;\n      float totalWeight = 0.0;\n\n      // Subsample kernel space.\n      for (float i = -u_radius + u_offset; i <= u_radius; i += u_step) {\n        for (float j = -u_radius + u_offset; j <= u_radius; j += u_step) {\n          vec2 shift = vec2(j, i) * u_texelSize;\n          vec2 coord = vec2(centerCoord + shift);\n          vec3 frameColor = texture(u_inputFrame, coord).rgb;\n          float outVal = texture(u_segmentationMask, coord).a;\n\n          spaceWeight = gaussian(distance(centerCoord, coord), u_sigmaTexel);\n          colorWeight = gaussian(distance(centerColor, frameColor), u_sigmaColor);\n          totalWeight += spaceWeight * colorWeight;\n\n          newVal += spaceWeight * colorWeight * outVal;\n        }\n      }\n      newVal /= totalWeight;\n\n      outColor = vec4(vec3(0.0), newVal);\n    }\n  `\n\n  const [segmentationWidth, segmentationHeight] = InputResolutions[\n    segmentationConfig.inputResolution\n  ][1]\n  const { width: outputWidth, height: outputHeight } = canvas\n  const texelWidth = 1 / outputWidth\n  const texelHeight = 1 / outputHeight\n\n  const fragmentShader = compileShader(\n    gl,\n    gl.FRAGMENT_SHADER,\n    fragmentShaderSource\n  )\n  const program = createPiplelineStageProgram(\n    gl,\n    vertexShader,\n    fragmentShader,\n    positionBuffer,\n    texCoordBuffer\n  )\n  const inputFrameLocation = gl.getUniformLocation(program, 'u_inputFrame')\n  const segmentationMaskLocation = gl.getUniformLocation(\n    program,\n    'u_segmentationMask'\n  )\n  const texelSizeLocation = gl.getUniformLocation(program, 'u_texelSize')\n  const stepLocation = gl.getUniformLocation(program, 'u_step')\n  const radiusLocation = gl.getUniformLocation(program, 'u_radius')\n  const offsetLocation = gl.getUniformLocation(program, 'u_offset')\n  const sigmaTexelLocation = gl.getUniformLocation(program, 'u_sigmaTexel')\n  const sigmaColorLocation = gl.getUniformLocation(program, 'u_sigmaColor')\n\n  const frameBuffer = gl.createFramebuffer()\n  gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer)\n  gl.framebufferTexture2D(\n    gl.FRAMEBUFFER,\n    gl.COLOR_ATTACHMENT0,\n    gl.TEXTURE_2D,\n    outputTexture,\n    0\n  )\n\n  gl.useProgram(program)\n  gl.uniform1i(inputFrameLocation, 0)\n  gl.uniform1i(segmentationMaskLocation, 1)\n  gl.uniform2f(texelSizeLocation, texelWidth, texelHeight)\n\n  // Ensures default values are configured to prevent infinite\n  // loop in fragment shader\n  updateSigmaSpace(0)\n  updateSigmaColor(0)\n\n  function render() {\n    gl.useProgram(program)\n    gl.activeTexture(gl.TEXTURE1)\n    gl.bindTexture(gl.TEXTURE_2D, inputTexture)\n    gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer)\n    gl.viewport(0, 0, outputWidth, outputHeight)\n    gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4)\n  }\n\n  function updateSigmaSpace(sigmaSpace: number) {\n    sigmaSpace *= Math.max(\n      outputWidth / segmentationWidth,\n      outputHeight / segmentationHeight\n    )\n\n    const kSparsityFactor = 0.66 // Higher is more sparse.\n    const sparsity = Math.max(1, Math.sqrt(sigmaSpace) * kSparsityFactor)\n    const step = sparsity\n    const radius = sigmaSpace\n    const offset = step > 1 ? step * 0.5 : 0\n    const sigmaTexel = Math.max(texelWidth, texelHeight) * sigmaSpace\n\n    gl.useProgram(program)\n    gl.uniform1f(stepLocation, step)\n    gl.uniform1f(radiusLocation, radius)\n    gl.uniform1f(offsetLocation, offset)\n    gl.uniform1f(sigmaTexelLocation, sigmaTexel)\n  }\n\n  function updateSigmaColor(sigmaColor: number) {\n    gl.useProgram(program)\n    gl.uniform1f(sigmaColorLocation, sigmaColor)\n  }\n\n  function cleanUp() {\n    gl.deleteFramebuffer(frameBuffer)\n    gl.deleteProgram(program)\n    gl.deleteShader(fragmentShader)\n  }\n\n  return { render, updateSigmaSpace, updateSigmaColor, cleanUp }\n}\n","import {\n  compileShader,\n  createPiplelineStageProgram,\n  createTexture,\n  glsl,\n} from '../helpers/webglHelper'\n\nexport function buildBackgroundBlurStage(\n  gl: WebGL2RenderingContext,\n  positionBuffer: WebGLBuffer,\n  texCoordBuffer: WebGLBuffer,\n  personMaskTexture: WebGLTexture,\n  canvas: HTMLCanvasElement\n) {\n  const vertexShaderSource = glsl`#version 300 es\n\n    in vec2 a_position;\n    in vec2 a_texCoord;\n\n    uniform float u_flipY;\n\n    out vec2 v_texCoord;\n\n    void main() {\n      // Flipping Y is required for the last pass when rendering to canvas\n      gl_Position = vec4(a_position * vec2(1.0, u_flipY), 0.0, 1.0);\n      v_texCoord = a_texCoord;\n    }\n  `\n\n  const fragmentShaderSource = glsl`#version 300 es\n\n    precision highp float;\n\n    uniform sampler2D u_inputFrame;\n    uniform sampler2D u_personMask;\n    uniform vec2 u_texelSize;\n\n    in vec2 v_texCoord;\n\n    out vec4 outColor;\n\n    const float offset[5] = float[](0.0, 1.0, 2.0, 3.0, 4.0);\n    const float weight[5] = float[](0.2270270270, 0.1945945946, 0.1216216216,\n      0.0540540541, 0.0162162162);\n\n    void main() {\n      vec4 centerColor = texture(u_inputFrame, v_texCoord);\n      float personMask = texture(u_personMask, v_texCoord).a;\n\n      vec4 frameColor = centerColor * weight[0] * (1.0 - personMask);\n\n      for (int i = 1; i < 5; i++) {\n        vec2 offset = vec2(offset[i]) * u_texelSize;\n\n        vec2 texCoord = v_texCoord + offset;\n        frameColor += texture(u_inputFrame, texCoord) * weight[i] *\n          (1.0 - texture(u_personMask, texCoord).a);\n\n        texCoord = v_texCoord - offset;\n        frameColor += texture(u_inputFrame, texCoord) * weight[i] *\n          (1.0 - texture(u_personMask, texCoord).a);\n      }\n      outColor = vec4(frameColor.rgb + (1.0 - frameColor.a) * centerColor.rgb, 1.0);\n    }\n  `\n\n  const { width: outputWidth, height: outputHeight } = canvas\n  const texelWidth = 1 / outputWidth\n  const texelHeight = 1 / outputHeight\n\n  const vertexShader = compileShader(gl, gl.VERTEX_SHADER, vertexShaderSource)\n  const fragmentShader = compileShader(\n    gl,\n    gl.FRAGMENT_SHADER,\n    fragmentShaderSource\n  )\n  const program = createPiplelineStageProgram(\n    gl,\n    vertexShader,\n    fragmentShader,\n    positionBuffer,\n    texCoordBuffer\n  )\n  const inputFrameLocation = gl.getUniformLocation(program, 'u_inputFrame')\n  const personMaskLocation = gl.getUniformLocation(program, 'u_personMask')\n  const texelSizeLocation = gl.getUniformLocation(program, 'u_texelSize')\n  const flipYLocation = gl.getUniformLocation(program, 'u_flipY')\n  const texture1 = createTexture(gl, gl.RGBA8, outputWidth, outputHeight)\n  const texture2 = createTexture(gl, gl.RGBA8, outputWidth, outputHeight)\n\n  const frameBuffer1 = gl.createFramebuffer()\n  gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer1)\n  gl.framebufferTexture2D(\n    gl.FRAMEBUFFER,\n    gl.COLOR_ATTACHMENT0,\n    gl.TEXTURE_2D,\n    texture1,\n    0\n  )\n\n  const frameBuffer2 = gl.createFramebuffer()\n  gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer2)\n  gl.framebufferTexture2D(\n    gl.FRAMEBUFFER,\n    gl.COLOR_ATTACHMENT0,\n    gl.TEXTURE_2D,\n    texture2,\n    0\n  )\n\n  gl.useProgram(program)\n  gl.uniform1i(inputFrameLocation, 0)\n  gl.uniform1i(personMaskLocation, 1)\n\n  function render() {\n    gl.useProgram(program)\n\n    gl.activeTexture(gl.TEXTURE1)\n    gl.bindTexture(gl.TEXTURE_2D, personMaskTexture)\n    gl.uniform1f(flipYLocation, 1.0)\n\n    gl.activeTexture(gl.TEXTURE0)\n\n    gl.uniform2f(texelSizeLocation, 0, texelHeight)\n    gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer1)\n    gl.viewport(0, 0, outputWidth, outputHeight)\n    gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4)\n\n    for (let i = 0; i < 9; i++) {\n      gl.bindTexture(gl.TEXTURE_2D, texture1)\n      gl.uniform2f(texelSizeLocation, texelWidth, 0)\n      gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer2)\n      gl.viewport(0, 0, outputWidth, outputHeight)\n      gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4)\n\n      gl.bindTexture(gl.TEXTURE_2D, texture2)\n      gl.uniform2f(texelSizeLocation, 0, texelHeight)\n      gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer1)\n      gl.viewport(0, 0, outputWidth, outputHeight)\n      gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4)\n    }\n\n    gl.bindTexture(gl.TEXTURE_2D, texture1)\n    gl.uniform2f(texelSizeLocation, texelWidth, 0)\n    gl.uniform1f(flipYLocation, -1.0)\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null)\n    gl.viewport(0, 0, outputWidth, outputHeight)\n    gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4)\n  }\n\n  function cleanUp() {\n    gl.deleteFramebuffer(frameBuffer2)\n    gl.deleteFramebuffer(frameBuffer1)\n    gl.deleteTexture(texture2)\n    gl.deleteTexture(texture1)\n    gl.deleteProgram(program)\n    gl.deleteShader(fragmentShader)\n    gl.deleteShader(vertexShader)\n  }\n\n  return {\n    render,\n    cleanUp,\n  }\n}\n","import { BlendMode } from '../../core/helpers/postProcessingHelper'\nimport {\n  compileShader,\n  createPiplelineStageProgram,\n  createTexture,\n  glsl,\n} from '../helpers/webglHelper'\n\nexport type BackgroundImageStage = {\n  render(): void\n  updateCoverage(coverage: [number, number]): void\n  updateLightWrapping(lightWrapping: number): void\n  updateBlendMode(blendMode: BlendMode): void\n  cleanUp(): void\n}\n\nexport function buildBackgroundImageStage(\n  gl: WebGL2RenderingContext,\n  positionBuffer: WebGLBuffer,\n  texCoordBuffer: WebGLBuffer,\n  personMaskTexture: WebGLTexture,\n  backgroundImage: HTMLImageElement | null,\n  canvas: HTMLCanvasElement\n): BackgroundImageStage {\n  const vertexShaderSource = glsl`#version 300 es\n\n    uniform vec2 u_backgroundScale;\n    uniform vec2 u_backgroundOffset;\n\n    in vec2 a_position;\n    in vec2 a_texCoord;\n\n    out vec2 v_texCoord;\n    out vec2 v_backgroundCoord;\n\n    void main() {\n      // Flipping Y is required when rendering to canvas\n      gl_Position = vec4(a_position * vec2(1.0, -1.0), 0.0, 1.0);\n      v_texCoord = a_texCoord;\n      v_backgroundCoord = a_texCoord * u_backgroundScale + u_backgroundOffset;\n    }\n  `\n\n  const fragmentShaderSource = glsl`#version 300 es\n\n    precision highp float;\n\n    uniform sampler2D u_inputFrame;\n    uniform sampler2D u_personMask;\n    uniform sampler2D u_background;\n    uniform vec2 u_coverage;\n    uniform float u_lightWrapping;\n    uniform float u_blendMode;\n\n    in vec2 v_texCoord;\n    in vec2 v_backgroundCoord;\n\n    out vec4 outColor;\n\n    vec3 screen(vec3 a, vec3 b) {\n      return 1.0 - (1.0 - a) * (1.0 - b);\n    }\n\n    vec3 linearDodge(vec3 a, vec3 b) {\n      return a + b;\n    }\n\n    void main() {\n      vec3 frameColor = texture(u_inputFrame, v_texCoord).rgb;\n      vec3 backgroundColor = texture(u_background, v_backgroundCoord).rgb;\n      float personMask = texture(u_personMask, v_texCoord).a;\n      float lightWrapMask = 1.0 - max(0.0, personMask - u_coverage.y) / (1.0 - u_coverage.y);\n      vec3 lightWrap = u_lightWrapping * lightWrapMask * backgroundColor;\n      frameColor = u_blendMode * linearDodge(frameColor, lightWrap) +\n        (1.0 - u_blendMode) * screen(frameColor, lightWrap);\n      personMask = smoothstep(u_coverage.x, u_coverage.y, personMask);\n      outColor = vec4(frameColor * personMask + backgroundColor * (1.0 - personMask), 1.0);\n    }\n  `\n\n  const { width: outputWidth, height: outputHeight } = canvas\n  const outputRatio = outputWidth / outputHeight\n\n  const vertexShader = compileShader(gl, gl.VERTEX_SHADER, vertexShaderSource)\n  const fragmentShader = compileShader(\n    gl,\n    gl.FRAGMENT_SHADER,\n    fragmentShaderSource\n  )\n  const program = createPiplelineStageProgram(\n    gl,\n    vertexShader,\n    fragmentShader,\n    positionBuffer,\n    texCoordBuffer\n  )\n  const backgroundScaleLocation = gl.getUniformLocation(\n    program,\n    'u_backgroundScale'\n  )\n  const backgroundOffsetLocation = gl.getUniformLocation(\n    program,\n    'u_backgroundOffset'\n  )\n  const inputFrameLocation = gl.getUniformLocation(program, 'u_inputFrame')\n  const personMaskLocation = gl.getUniformLocation(program, 'u_personMask')\n  const backgroundLocation = gl.getUniformLocation(program, 'u_background')\n  const coverageLocation = gl.getUniformLocation(program, 'u_coverage')\n  const lightWrappingLocation = gl.getUniformLocation(\n    program,\n    'u_lightWrapping'\n  )\n  const blendModeLocation = gl.getUniformLocation(program, 'u_blendMode')\n\n  gl.useProgram(program)\n  gl.uniform2f(backgroundScaleLocation, 1, 1)\n  gl.uniform2f(backgroundOffsetLocation, 0, 0)\n  gl.uniform1i(inputFrameLocation, 0)\n  gl.uniform1i(personMaskLocation, 1)\n  gl.uniform2f(coverageLocation, 0, 1)\n  gl.uniform1f(lightWrappingLocation, 0)\n  gl.uniform1f(blendModeLocation, 0)\n\n  let backgroundTexture: WebGLTexture | null = null\n  // TODO Find a better to handle background being loaded\n  if (backgroundImage?.complete) {\n    updateBackgroundImage(backgroundImage)\n  } else if (backgroundImage) {\n    backgroundImage.onload = () => {\n      updateBackgroundImage(backgroundImage)\n    }\n  }\n\n  function render() {\n    gl.useProgram(program)\n    gl.activeTexture(gl.TEXTURE1)\n    gl.bindTexture(gl.TEXTURE_2D, personMaskTexture)\n    if (backgroundTexture !== null) {\n      gl.activeTexture(gl.TEXTURE2)\n      gl.bindTexture(gl.TEXTURE_2D, backgroundTexture)\n      // TODO Handle correctly the background not loaded yet\n      gl.uniform1i(backgroundLocation, 2)\n    }\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null)\n    gl.viewport(0, 0, outputWidth, outputHeight)\n    gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4)\n  }\n\n  function updateBackgroundImage(backgroundImage: HTMLImageElement) {\n    backgroundTexture = createTexture(\n      gl,\n      gl.RGBA8,\n      backgroundImage.naturalWidth,\n      backgroundImage.naturalHeight,\n      gl.LINEAR,\n      gl.LINEAR\n    )\n    gl.texSubImage2D(\n      gl.TEXTURE_2D,\n      0,\n      0,\n      0,\n      backgroundImage.naturalWidth,\n      backgroundImage.naturalHeight,\n      gl.RGBA,\n      gl.UNSIGNED_BYTE,\n      backgroundImage\n    )\n\n    let xOffset = 0\n    let yOffset = 0\n    let backgroundWidth = backgroundImage.naturalWidth\n    let backgroundHeight = backgroundImage.naturalHeight\n    const backgroundRatio = backgroundWidth / backgroundHeight\n    if (backgroundRatio < outputRatio) {\n      backgroundHeight = backgroundWidth / outputRatio\n      yOffset = (backgroundImage.naturalHeight - backgroundHeight) / 2\n    } else {\n      backgroundWidth = backgroundHeight * outputRatio\n      xOffset = (backgroundImage.naturalWidth - backgroundWidth) / 2\n    }\n\n    const xScale = backgroundWidth / backgroundImage.naturalWidth\n    const yScale = backgroundHeight / backgroundImage.naturalHeight\n    xOffset /= backgroundImage.naturalWidth\n    yOffset /= backgroundImage.naturalHeight\n\n    gl.uniform2f(backgroundScaleLocation, xScale, yScale)\n    gl.uniform2f(backgroundOffsetLocation, xOffset, yOffset)\n  }\n\n  function updateCoverage(coverage: [number, number]) {\n    gl.useProgram(program)\n    gl.uniform2f(coverageLocation, coverage[0], coverage[1])\n  }\n\n  function updateLightWrapping(lightWrapping: number) {\n    gl.useProgram(program)\n    gl.uniform1f(lightWrappingLocation, lightWrapping)\n  }\n\n  function updateBlendMode(blendMode: BlendMode) {\n    gl.useProgram(program)\n    gl.uniform1f(blendModeLocation, blendMode === 'screen' ? 0 : 1)\n  }\n\n  function cleanUp() {\n    gl.deleteTexture(backgroundTexture)\n    gl.deleteProgram(program)\n    gl.deleteShader(fragmentShader)\n    gl.deleteShader(vertexShader)\n  }\n\n  return {\n    render,\n    updateCoverage,\n    updateLightWrapping,\n    updateBlendMode,\n    cleanUp,\n  }\n}\n","import { useCallback, useRef, useState } from 'react'\n\nfunction useStats() {\n  const [fps, setFps] = useState(0)\n  const [durations, setDurations] = useState<number[]>([])\n  const previousTimeRef = useRef(0)\n  const beginTimeRef = useRef(0)\n  const durationsRef = useRef<number[]>([])\n  const eventCount = useRef(0)\n  const frameCountRef = useRef(0)\n\n  // The useCallbacks below are required to prevent infinite loop\n  // when the functions are called inside useEffect\n\n  const beginFrame = useCallback(() => {\n    beginTimeRef.current = performance.now()\n  }, [])\n\n  const addFrameEvent = useCallback(() => {\n    const time = performance.now()\n    durationsRef.current[eventCount.current] = time - beginTimeRef.current\n    beginTimeRef.current = time\n    eventCount.current++\n  }, [])\n\n  const endFrame = useCallback(() => {\n    const time = performance.now()\n    durationsRef.current[eventCount.current] = time - beginTimeRef.current\n    frameCountRef.current++\n    if (time >= previousTimeRef.current + 1000) {\n      setFps((frameCountRef.current * 1000) / (time - previousTimeRef.current))\n      setDurations(durationsRef.current)\n      previousTimeRef.current = time\n      frameCountRef.current = 0\n    }\n    eventCount.current = 0\n  }, [])\n\n  return { fps, durations, beginFrame, addFrameEvent, endFrame }\n}\n\nexport default useStats\n","import { BodyPix } from '@tensorflow-models/body-pix'\nimport { useEffect, useRef, useState } from 'react'\nimport { buildCanvas2dPipeline } from '../../pipelines/canvas2d/canvas2dPipeline'\nimport { buildWebGL2Pipeline } from '../../pipelines/webgl2/webgl2Pipeline'\nimport { BackgroundConfig } from '../helpers/backgroundHelper'\nimport { RenderingPipeline } from '../helpers/renderingPipelineHelper'\nimport { SegmentationConfig } from '../helpers/segmentationHelper'\nimport { SourcePlayback } from '../helpers/sourceHelper'\nimport useStats from './useStats'\nimport { TFLite } from './useTFLite'\n\nfunction useRenderingPipeline(\n  sourcePlayback: SourcePlayback,\n  backgroundConfig: BackgroundConfig,\n  segmentationConfig: SegmentationConfig,\n  bodyPix: BodyPix,\n  tflite: TFLite\n) {\n  const [pipeline, setPipeline] = useState<RenderingPipeline | null>(null)\n  const backgroundImageRef = useRef<HTMLImageElement>(null)\n  const canvasRef = useRef<HTMLCanvasElement>(null!)\n  const { fps, durations, beginFrame, addFrameEvent, endFrame } = useStats()\n\n  useEffect(() => {\n    // The useEffect cleanup function is not enough to stop\n    // the rendering loop when the framerate is low\n    let shouldRender = true\n\n    let renderRequestId: number\n    let lastRenderTime = performance.now()\n    const frameDelay = 1000 / 30;\n\n    const newPipeline =\n      segmentationConfig.pipeline === 'webgl2'\n        ? buildWebGL2Pipeline(\n          sourcePlayback,\n          backgroundImageRef.current,\n          backgroundConfig,\n          segmentationConfig,\n          canvasRef.current,\n          tflite,\n          addFrameEvent\n        )\n        : buildCanvas2dPipeline(\n          sourcePlayback,\n          backgroundConfig,\n          segmentationConfig,\n          canvasRef.current,\n          bodyPix,\n          tflite,\n          addFrameEvent\n        )\n\n    async function render() {\n      if (!shouldRender) {\n        return\n      }\n      const now = performance.now();\n      if (now - lastRenderTime >= frameDelay) {\n        lastRenderTime = now;\n        beginFrame()\n        await newPipeline.render()\n        endFrame()\n      }\n      renderRequestId = requestAnimationFrame(render)\n    }\n\n    render()\n    console.log(\n      'Animation started:',\n      sourcePlayback,\n      backgroundConfig,\n      segmentationConfig\n    )\n\n    setPipeline(newPipeline)\n\n    return () => {\n      shouldRender = false\n      cancelAnimationFrame(renderRequestId)\n      newPipeline.cleanUp()\n      console.log(\n        'Animation stopped:',\n        sourcePlayback,\n        backgroundConfig,\n        segmentationConfig\n      )\n\n      setPipeline(null)\n    }\n  }, [\n    sourcePlayback,\n    backgroundConfig,\n    segmentationConfig,\n    bodyPix,\n    tflite,\n    setPipeline,\n    beginFrame,\n    addFrameEvent,\n    endFrame,\n  ])\n\n  return {\n    pipeline,\n    backgroundImageRef,\n    canvasRef,\n    fps,\n    durations,\n  }\n}\n\nexport default useRenderingPipeline\n","import { createStyles, makeStyles, Theme } from '@material-ui/core/styles'\nimport Typography from '@material-ui/core/Typography'\nimport { BodyPix } from '@tensorflow-models/body-pix'\nimport React, { useEffect } from 'react'\nimport { BackgroundConfig } from '../helpers/backgroundHelper'\nimport { PostProcessingConfig } from '../helpers/postProcessingHelper'\nimport { SegmentationConfig } from '../helpers/segmentationHelper'\nimport { SourcePlayback, StreamPlayback } from '../helpers/sourceHelper'\nimport useRenderingPipeline from '../hooks/useRenderingPipeline'\nimport { TFLite } from '../hooks/useTFLite'\n\ntype OutputViewerProps = {\n  sourcePlayback: SourcePlayback\n  backgroundConfig: BackgroundConfig\n  segmentationConfig: SegmentationConfig\n  postProcessingConfig: PostProcessingConfig\n  bodyPix: BodyPix\n  tflite: TFLite\n  onLoad: (streamPlayback: StreamPlayback) => void\n}\n\nfunction OutputViewer(props: OutputViewerProps) {\n  const classes = useStyles()\n  const {\n    pipeline,\n    backgroundImageRef,\n    canvasRef,\n    fps,\n    durations: [resizingDuration, inferenceDuration, postProcessingDuration],\n  } = useRenderingPipeline(\n    props.sourcePlayback,\n    props.backgroundConfig,\n    props.segmentationConfig,\n    props.bodyPix,\n    props.tflite\n  )\n\n  const { onLoad } = props\n\n  useEffect(() => {\n    if (pipeline) {\n      pipeline.updatePostProcessingConfig(props.postProcessingConfig)\n    }\n  }, [pipeline, props.postProcessingConfig])\n\n  useEffect(() => {\n    onLoad({\n      canvasStream: canvasRef.current && canvasRef.current.captureStream(30),\n    })\n  }, [onLoad, canvasRef, props.postProcessingConfig, props.segmentationConfig])\n\n  const statDetails: [string, number][] = [\n    ['resize', resizingDuration],\n    ['inference', inferenceDuration],\n    ['compose', postProcessingDuration],\n  ]\n  return (\n    <div className={classes.root}>\n      {props.backgroundConfig.type === 'image' && (\n        <img\n          ref={backgroundImageRef}\n          className={classes.render}\n          src={props.backgroundConfig.url}\n          alt=\"\"\n          hidden={\n            !props.postProcessingConfig.useImageLayer ||\n            props.segmentationConfig.pipeline === 'webgl2'\n          }\n        />\n      )}\n      <canvas\n        // The key attribute is required to create a new canvas when switching\n        // context mode\n        key={props.segmentationConfig.pipeline}\n        ref={canvasRef}\n        className={classes.render}\n        width={props.sourcePlayback.width}\n        height={props.sourcePlayback.height}\n      />\n      <Typography className={classes.stats} variant=\"caption\">\n        {`${canvasRef.current?.height}p ${Math.round(fps)}fps`}\n        <br />\n        {`${statDetails\n          .map(\n            ([key, val]) => `${key} ${val && val.toFixed(2).padStart(5, '0')}ms`\n          )\n          .join(', ')}`}\n      </Typography>\n    </div>\n  )\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      flex: 1,\n      position: 'relative',\n    },\n    render: {\n      position: 'absolute',\n      width: '100%',\n      height: '100%',\n      objectFit: 'cover',\n    },\n    stats: {\n      position: 'absolute',\n      top: 0,\n      right: 0,\n      left: 0,\n      textAlign: 'center',\n      backgroundColor: 'rgba(0, 0, 0, 0.48)',\n      color: theme.palette.common.white,\n    },\n  })\n)\n\nexport default OutputViewer\n","import { Typography } from '@material-ui/core'\nimport CircularProgress from '@material-ui/core/CircularProgress'\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles'\nimport VideocamOffIcon from '@material-ui/icons/VideocamOff'\nimport React, { SyntheticEvent, useEffect, useRef, useState } from 'react'\nimport { SourceConfig, SourcePlayback } from '../helpers/sourceHelper'\n\ntype SourceViewerProps = {\n  sourceConfig: SourceConfig\n  onLoad: (sourcePlayback: SourcePlayback) => void\n}\n\nfunction SourceViewer(props: SourceViewerProps) {\n  const classes = useStyles()\n  const [sourceUrl, setSourceUrl] = useState<string>()\n  const [isLoading, setLoading] = useState(false)\n  const [isCameraError, setCameraError] = useState(false)\n  const videoRef = useRef<HTMLVideoElement>(null)\n\n  useEffect(() => {\n    setSourceUrl(undefined)\n    setLoading(true)\n    setCameraError(false)\n\n    // Enforces reloading the resource, otherwise\n    // onLoad event is not always dispatched and the\n    // progress indicator never disappears\n    setTimeout(() => setSourceUrl(props.sourceConfig.url))\n  }, [props.sourceConfig])\n\n  useEffect(() => {\n    async function getCameraStream() {\n      try {\n        const constraint: MediaStreamConstraints = {\n          video: { height: { exact: props.sourceConfig.resolution } },\n        }\n        const stream = await navigator.mediaDevices.getUserMedia(constraint)\n        if (videoRef.current) {\n          videoRef.current.srcObject = stream\n          return\n        }\n      } catch (error) {\n        console.error('Error opening video camera.', error)\n      }\n      setLoading(false)\n      setCameraError(true)\n    }\n\n    if (videoRef.current) {\n      const stream = videoRef.current.srcObject\n      if (stream && stream instanceof MediaStream) {\n        // stop so gUM can get different height\n        stream.getVideoTracks().forEach((t) => t.stop())\n      }\n    }\n    if (props.sourceConfig.type === 'camera') {\n      getCameraStream()\n    } else if (videoRef.current) {\n      videoRef.current.srcObject = null\n    }\n  }, [props.sourceConfig])\n\n  function handleImageLoad(event: SyntheticEvent) {\n    const image = event.target as HTMLImageElement\n    props.onLoad({\n      htmlElement: image,\n      width: image.naturalWidth,\n      height: image.naturalHeight,\n    })\n    setLoading(false)\n  }\n\n  function handleVideoLoad(event: SyntheticEvent) {\n    const video = event.target as HTMLVideoElement\n    props.onLoad({\n      htmlElement: video,\n      width: video.videoWidth,\n      height: video.videoHeight,\n    })\n    setLoading(false)\n  }\n\n  return (\n    <div className={classes.root}>\n      {isLoading && <CircularProgress />}\n      {props.sourceConfig.type === 'image' ? (\n        <>\n          <img\n            className={classes.sourcePlayback}\n            src={sourceUrl}\n            hidden={isLoading}\n            alt=\"\"\n            onLoad={handleImageLoad}\n          />\n          <Typography className={classes.stats} variant=\"caption\">\n            Image Input\n          </Typography>\n        </>\n      ) : isCameraError ? (\n        <VideocamOffIcon fontSize=\"large\" />\n      ) : (\n        <>\n          <video\n            ref={videoRef}\n            className={classes.sourcePlayback}\n            src={sourceUrl}\n            hidden={isLoading}\n            autoPlay\n            playsInline\n            controls={false}\n            muted\n            loop\n            onLoadedData={handleVideoLoad}\n          />\n          <Typography className={classes.stats} variant=\"caption\">\n            Video Input\n          </Typography>\n        </>\n      )}\n    </div>\n  )\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      position: 'relative',\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center',\n\n      [theme.breakpoints.down('xs')]: {\n        width: 0,\n        overflow: 'hidden',\n      },\n\n      [theme.breakpoints.up('sm')]: {\n        flex: 1,\n        borderRightWidth: 1,\n        borderRightStyle: 'solid',\n        borderRightColor: theme.palette.divider,\n      },\n    },\n    stats: {\n      position: 'absolute',\n      top: 0,\n      right: 0,\n      left: 0,\n      textAlign: 'center',\n      backgroundColor: 'rgba(0, 0, 0, 0.48)',\n      color: theme.palette.common.white,\n    },\n    sourcePlayback: {\n      position: 'absolute',\n      width: '100%',\n      height: '100%',\n      objectFit: 'cover',\n    },\n  })\n)\n\nexport default SourceViewer\n","import Avatar from '@material-ui/core/Avatar'\nimport Paper from '@material-ui/core/Paper'\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles'\nimport { BodyPix } from '@tensorflow-models/body-pix'\nimport { useEffect, useState } from 'react'\nimport { BackgroundConfig } from '../helpers/backgroundHelper'\nimport { PostProcessingConfig } from '../helpers/postProcessingHelper'\nimport { SegmentationConfig } from '../helpers/segmentationHelper'\nimport {\n  SourceConfig,\n  SourcePlayback,\n  StreamPlayback,\n} from '../helpers/sourceHelper'\nimport { TFLite } from '../hooks/useTFLite'\nimport OutputStreamViewer from './OutputStreamViewer'\nimport OutputViewer from './OutputViewer'\nimport SourceViewer from './SourceViewer'\n\ntype ViewerCardProps = {\n  sourceConfig: SourceConfig\n  backgroundConfig: BackgroundConfig\n  segmentationConfig: SegmentationConfig\n  postProcessingConfig: PostProcessingConfig\n  bodyPix?: BodyPix\n  tflite?: TFLite\n}\n\nfunction ViewerCard(props: ViewerCardProps) {\n  const classes = useStyles()\n  const [sourcePlayback, setSourcePlayback] = useState<SourcePlayback>()\n  const [streamPlayback, setStreamPlayback] = useState<StreamPlayback>()\n\n  useEffect(() => {\n    setSourcePlayback(undefined)\n  }, [props.sourceConfig])\n\n  return (\n    <Paper className={classes.root}>\n      <SourceViewer\n        sourceConfig={props.sourceConfig}\n        onLoad={setSourcePlayback}\n      />\n      {sourcePlayback && props.bodyPix && props.tflite ? (\n        <>\n          <OutputViewer\n            sourcePlayback={sourcePlayback}\n            backgroundConfig={props.backgroundConfig}\n            segmentationConfig={props.segmentationConfig}\n            postProcessingConfig={props.postProcessingConfig}\n            bodyPix={props.bodyPix}\n            tflite={props.tflite}\n            onLoad={setStreamPlayback}\n          />\n          {streamPlayback && (\n            <OutputStreamViewer streamPlayback={streamPlayback} />\n          )}\n        </>\n      ) : (\n        <div className={classes.noOutput}>\n          <Avatar className={classes.avatar} />\n        </div>\n      )}\n    </Paper>\n  )\n}\n\nconst useStyles = makeStyles((theme: Theme) => {\n  const minHeight = [`${theme.spacing(52)}px`, `100vh - ${theme.spacing(2)}px`]\n\n  return createStyles({\n    root: {\n      minHeight: `calc(min(${minHeight.join(', ')}))`,\n      display: 'flex',\n      overflow: 'hidden',\n\n      [theme.breakpoints.up('md')]: {\n        gridColumnStart: 1,\n        gridColumnEnd: 4,\n      },\n\n      [theme.breakpoints.up('lg')]: {\n        gridRowStart: 1,\n        gridRowEnd: 4,\n      },\n    },\n    noOutput: {\n      flex: 1,\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center',\n    },\n    avatar: {\n      width: theme.spacing(20),\n      height: theme.spacing(20),\n    },\n  })\n})\n\nexport default ViewerCard\n","import * as tfBodyPix from '@tensorflow-models/body-pix'\nimport * as tf from '@tensorflow/tfjs'\nimport { useEffect, useState } from 'react'\n\nfunction useBodyPix() {\n  const [bodyPix, setBodyPix] = useState<tfBodyPix.BodyPix>()\n\n  useEffect(() => {\n    async function loadBodyPix() {\n      console.log('Loading TensorFlow.js and BodyPix segmentation model')\n      await tf.ready()\n      setBodyPix(await tfBodyPix.load())\n      console.log('TensorFlow.js and BodyPix loaded')\n    }\n\n    loadBodyPix()\n  }, [])\n\n  return bodyPix\n}\n\nexport default useBodyPix\n","import { useEffect, useState } from 'react'\nimport { InputResolutions, SegmentationConfig } from '../helpers/segmentationHelper'\n\ndeclare function createTFLiteModule(): Promise<TFLite>\ndeclare function createTFLiteSIMDModule(): Promise<TFLite>\n\nexport interface TFLite extends EmscriptenModule {\n  _getModelBufferMemoryOffset(): number\n  _getInputMemoryOffset(): number\n  _getInputHeight(): number\n  _getInputWidth(): number\n  _getInputChannelCount(): number\n  _getOutputMemoryOffset(): number\n  _getOutputHeight(): number\n  _getOutputWidth(): number\n  _getOutputChannelCount(): number\n  _loadModel(bufferSize: number): number\n  _runInference(): number\n}\n\nfunction useTFLite(segmentationConfig: SegmentationConfig) {\n  const [tflite, setTFLite] = useState<TFLite>()\n  const [tfliteSIMD, setTFLiteSIMD] = useState<TFLite>()\n  const [selectedTFLite, setSelectedTFLite] = useState<TFLite>()\n  const [isSIMDSupported, setSIMDSupported] = useState(false)\n\n  useEffect(() => {\n    async function loadTFLite() {\n      createTFLiteModule().then(setTFLite)\n      try {\n        const createdTFLiteSIMD = await createTFLiteSIMDModule()\n        setTFLiteSIMD(createdTFLiteSIMD)\n        setSIMDSupported(true)\n      } catch (error) {\n        console.warn('Failed to create TFLite SIMD WebAssembly module.', error)\n      }\n    }\n\n    loadTFLite()\n  }, [])\n\n  let promise = Promise.resolve()\n  useEffect(() => {\n    async function loadMeetModel() {\n      if (\n        !tflite ||\n        (isSIMDSupported && !tfliteSIMD) ||\n        (!isSIMDSupported && segmentationConfig.backend === 'wasmSimd') ||\n        segmentationConfig.model !== 'meet'\n      ) {\n        return\n      }\n\n      setSelectedTFLite(undefined)\n\n      const newSelectedTFLite =\n        segmentationConfig.backend === 'wasmSimd' ? tfliteSIMD : tflite\n\n      if (!newSelectedTFLite) {\n        throw new Error(\n          `TFLite backend unavailable: ${segmentationConfig.backend}`\n        )\n      }\n\n      const modelFileName = InputResolutions[segmentationConfig.inputResolution][0];\n      console.log('Loading meet model:', modelFileName)\n\n      const modelResponse = await fetch(\n        `${process.env.PUBLIC_URL}/models/${modelFileName}.tflite`\n      )\n      if (!modelResponse.ok) {\n        throw new Error(`TFLite model unavailable`)\n      }\n      const model = await modelResponse.arrayBuffer()\n      console.log('Model buffer size:', model.byteLength)\n\n      const modelBufferOffset = newSelectedTFLite._getModelBufferMemoryOffset()\n      console.log('Model buffer memory offset:', modelBufferOffset)\n      newSelectedTFLite.HEAPU8.set(new Uint8Array(model), modelBufferOffset)\n      console.log(\n        '_loadModel result:',\n        newSelectedTFLite._loadModel(model.byteLength)\n      )\n\n      console.log(\n        'Input memory offset:',\n        newSelectedTFLite._getInputMemoryOffset()\n      )\n      console.log('Input dimension:', [newSelectedTFLite._getInputWidth(), newSelectedTFLite._getInputHeight()])\n      console.log('Input channels:', newSelectedTFLite._getInputChannelCount())\n\n      console.log(\n        'Output memory offset:',\n        newSelectedTFLite._getOutputMemoryOffset()\n      )\n      console.log('Output height:', [newSelectedTFLite._getOutputWidth(), newSelectedTFLite._getOutputHeight()])\n      console.log(\n        'Output channels:',\n        newSelectedTFLite._getOutputChannelCount()\n      )\n\n      setSelectedTFLite(newSelectedTFLite)\n    }\n\n    promise = promise.then(() => loadMeetModel());\n  }, [\n    tflite,\n    tfliteSIMD,\n    isSIMDSupported,\n    segmentationConfig.model,\n    segmentationConfig.backend,\n    segmentationConfig.inputResolution,\n  ])\n\n  return { tflite: selectedTFLite, isSIMDSupported }\n}\n\nexport default useTFLite\n","import { createStyles, makeStyles, Theme } from '@material-ui/core/styles'\nimport { useEffect, useState } from 'react'\nimport BackgroundConfigCard from './core/components/BackgroundConfigCard'\nimport PostProcessingConfigCard from './core/components/PostProcessingConfigCard'\nimport SegmentationConfigCard from './core/components/SegmentationConfigCard'\nimport SourceConfigCard from './core/components/SourceConfigCard'\nimport ViewerCard from './core/components/ViewerCard'\nimport {\n  BackgroundConfig,\n  backgroundImageUrls,\n} from './core/helpers/backgroundHelper'\nimport { PostProcessingConfig } from './core/helpers/postProcessingHelper'\nimport { SegmentationConfig } from './core/helpers/segmentationHelper'\nimport { SourceConfig } from './core/helpers/sourceHelper'\nimport useBodyPix from './core/hooks/useBodyPix'\nimport useTFLite from './core/hooks/useTFLite'\n\nfunction App() {\n  const classes = useStyles()\n  const [sourceConfig, setSourceConfig] = useState<SourceConfig>({\n    type: 'camera',\n    resolution: 360,\n  })\n  const [backgroundConfig, setBackgroundConfig] = useState<BackgroundConfig>({\n    type: 'image',\n    url: backgroundImageUrls[0],\n    image: Object.assign(new Image(), { src: backgroundImageUrls[0] }),\n  })\n  const [\n    segmentationConfig,\n    setSegmentationConfig,\n  ] = useState<SegmentationConfig>({\n    model: 'meet',\n    backend: 'wasm',\n    inputResolution: '96v2',\n    pipeline: 'canvas2dCpu',\n  })\n  const [\n    postProcessingConfig,\n    setPostProcessingConfig,\n  ] = useState<PostProcessingConfig>({\n    smoothSegmentationMask: true,\n    useImageLayer: false,\n    jointBilateralFilter: { sigmaSpace: 1, sigmaColor: 0.1 },\n    coverage: [0.5, 0.75],\n    lightWrapping: 0.3,\n    blendMode: 'screen',\n  })\n  const bodyPix = useBodyPix()\n  const { tflite, isSIMDSupported } = useTFLite(segmentationConfig)\n\n  useEffect(() => {\n    setSegmentationConfig((previousSegmentationConfig) => {\n      if (previousSegmentationConfig.backend === 'wasm' && isSIMDSupported) {\n        return { ...previousSegmentationConfig, backend: 'wasmSimd' }\n      } else {\n        return previousSegmentationConfig\n      }\n    })\n  }, [isSIMDSupported])\n\n  return (\n    <div className={classes.root}>\n      <ViewerCard\n        sourceConfig={sourceConfig}\n        backgroundConfig={backgroundConfig}\n        segmentationConfig={segmentationConfig}\n        postProcessingConfig={postProcessingConfig}\n        bodyPix={bodyPix}\n        tflite={tflite}\n      />\n      <div className={classes.pick}>\n        <SourceConfigCard config={sourceConfig} onChange={setSourceConfig} />\n        <BackgroundConfigCard\n          config={backgroundConfig}\n          onChange={setBackgroundConfig}\n        />\n      </div>\n      <SegmentationConfigCard\n        config={segmentationConfig}\n        isSIMDSupported={isSIMDSupported}\n        onChange={setSegmentationConfig}\n      />\n      <PostProcessingConfigCard\n        config={postProcessingConfig}\n        pipeline={segmentationConfig.pipeline}\n        onChange={setPostProcessingConfig}\n      />\n    </div>\n  )\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      display: 'grid',\n\n      [theme.breakpoints.up('xs')]: {\n        margin: theme.spacing(1),\n        gap: theme.spacing(1),\n        gridTemplateColumns: '1fr',\n      },\n\n      [theme.breakpoints.up('md')]: {\n        margin: theme.spacing(2),\n        gap: theme.spacing(2),\n        gridTemplateColumns: 'repeat(2, 1fr)',\n      },\n\n      [theme.breakpoints.up('lg')]: {\n        gridTemplateColumns: 'repeat(3, 1fr)',\n      },\n    },\n    resourceSelectionCards: {\n      display: 'flex',\n      flexDirection: 'column',\n    },\n    pick: {\n      display: 'flex',\n      flexDirection: 'column',\n\n      [theme.breakpoints.up('xs')]: {\n        gap: theme.spacing(1),\n      },\n\n      [theme.breakpoints.up('md')]: {\n        gap: theme.spacing(2),\n      },\n    },\n  })\n)\n\nexport default App\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import CssBaseline from '@material-ui/core/CssBaseline'\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <CssBaseline />\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}